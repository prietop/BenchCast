diff --git a/benchspec/CPU/502.gcc_r/Spec/object.pm b/benchspec/CPU/502.gcc_r/Spec/object.pm
index 5c6fcb8a..cc769c32 100644
--- a/benchspec/CPU/502.gcc_r/Spec/object.pm
+++ b/benchspec/CPU/502.gcc_r/Spec/object.pm
@@ -401,6 +401,9 @@ $bench_flags .= ' -DIN_GCC -DHAVE_CONFIG_H';
     builtins.c
     real.c
     mini-gmp.c
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
     spec_qsort/spec_qsort.c
 ));
 
diff --git a/benchspec/CPU/502.gcc_r/src/barrier_cast.c b/benchspec/CPU/502.gcc_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/502.gcc_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/502.gcc_r/src/barrier_cast.h b/benchspec/CPU/502.gcc_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/502.gcc_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/502.gcc_r/src/m5_mmap.c b/benchspec/CPU/502.gcc_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/502.gcc_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/502.gcc_r/src/m5_mmap.h b/benchspec/CPU/502.gcc_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/502.gcc_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/502.gcc_r/src/m5op_flags.h b/benchspec/CPU/502.gcc_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/502.gcc_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/502.gcc_r/src/m5op_x86.S b/benchspec/CPU/502.gcc_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/502.gcc_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/502.gcc_r/src/m5ops.h b/benchspec/CPU/502.gcc_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/502.gcc_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/502.gcc_r/src/toplev.c b/benchspec/CPU/502.gcc_r/src/toplev.c
index 99824927..5513b2ea 100644
--- a/benchspec/CPU/502.gcc_r/src/toplev.c
+++ b/benchspec/CPU/502.gcc_r/src/toplev.c
@@ -105,6 +105,16 @@ along with GCC; see the file COPYING3.  If not see
 				   declarations for e.g. AIX 4.x.  */
 #endif
 
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
 static void general_init (const char *);
 static void do_compile (void);
 static void process_options (void);
@@ -1048,7 +1058,19 @@ compile_file (void)
   invoke_plugin_callbacks (PLUGIN_START_UNIT, NULL);
 
   timevar_push (TV_PARSE);
-
+#ifdef SPECCAST
+  initialize_barrier();
+#endif
+#ifdef GEM5
+  map_m5_mem();
+#endif
+#ifdef SPECCAST
+  call_barrier();
+#endif
+#ifdef GEM5
+  printf("BEGIN ITERATION\n");
+  m5_work_begin(0);
+#endif
   /* Call the parser, which parses the entire file (calling
      rest_of_compilation for each function).  */
   lang_hooks.parse_file (set_yydebug);
@@ -1150,6 +1172,11 @@ compile_file (void)
      into the assembly file here, and hence we can not output anything to the
      assembly file after this point.  */
   targetm.asm_out.file_end ();
+#ifdef GEM5
+  printf("END ITERATION\n");
+  m5_work_end(1);
+#endif
+
 }
 
 /* Parse a -d... command line switch.  */
@@ -2410,15 +2437,13 @@ do_compile (void)
 	 predefined macros, such as __LDBL_MAX__, for targets using non
 	 default FP formats.  */
       init_adjust_machine_modes ();
-
+      
       /* Set up the back-end if requested.  */
       if (!no_backend)
 	backend_init ();
-
       /* Language-dependent initialization.  Returns true on success.  */
       if (lang_dependent_init (main_input_filename))
 	compile_file ();
-
       finalize ();
     }
 
diff --git a/benchspec/CPU/503.bwaves_r/Spec/object.pm b/benchspec/CPU/503.bwaves_r/Spec/object.pm
index 687dbe9d..a3068a87 100644
--- a/benchspec/CPU/503.bwaves_r/Spec/object.pm
+++ b/benchspec/CPU/503.bwaves_r/Spec/object.pm
@@ -50,6 +50,9 @@ $abstol = {
     shell_lam.F
     fill1.F
     fill2.F
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
     ));
 
 sub invoke {
diff --git a/benchspec/CPU/503.bwaves_r/src/barrier_cast.c b/benchspec/CPU/503.bwaves_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/503.bwaves_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/503.bwaves_r/src/barrier_cast.h b/benchspec/CPU/503.bwaves_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/503.bwaves_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/503.bwaves_r/src/flow_lam.F b/benchspec/CPU/503.bwaves_r/src/flow_lam.F
index 7a9d483d..fe2c5065 100644
--- a/benchspec/CPU/503.bwaves_r/src/flow_lam.F
+++ b/benchspec/CPU/503.bwaves_r/src/flow_lam.F
@@ -56,7 +56,7 @@ C        open (10,file='bwaves.out')
          write (6,'(1X,2(A,F15.6))')   'Re: ',rbuff(1),
      *             '    Pr: ',rbuff(2)
 
-
+       
 #if !defined(SPEC)
          write (6,*)  '(nx,ny,nz) ?'
 #endif
@@ -70,7 +70,8 @@ C        open (10,file='bwaves.out')
 #endif
        read(5,*) title
        read(5,*) rbuff(3),rbuff(4),rbuff(5),rbuff(6)
-
+       
+       
 c        Adjustment of artificial viscosity 
 c         tmp =1.0 * nprocs /32
 c         if ( tmp .gt. 1.0) then
@@ -81,7 +82,8 @@ c         endif
          write (6,'(1X,A,F7.3,A,A,F7.3,A,A,F7.3,A,F7.3)')
      1       'CFL:',rbuff(3),'   ', 'nuim:',rbuff(4),'  ',
      1           'nuex2:',rbuff(5),' nuex4:', rbuff(6)
-
+     
+      
 #if !defined(SPEC)
          write (6,*)  'What scheme you will use -explicit(0) or implicit(1)'
 #endif
diff --git a/benchspec/CPU/503.bwaves_r/src/m5_mmap.c b/benchspec/CPU/503.bwaves_r/src/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/503.bwaves_r/src/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/503.bwaves_r/src/m5_mmap.h b/benchspec/CPU/503.bwaves_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/503.bwaves_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/503.bwaves_r/src/m5op_flags.h b/benchspec/CPU/503.bwaves_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/503.bwaves_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/503.bwaves_r/src/m5op_x86.S b/benchspec/CPU/503.bwaves_r/src/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/503.bwaves_r/src/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/503.bwaves_r/src/m5ops.h b/benchspec/CPU/503.bwaves_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/503.bwaves_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/503.bwaves_r/src/shell_lam.F b/benchspec/CPU/503.bwaves_r/src/shell_lam.F
index c388b42f..5ffc422b 100644
--- a/benchspec/CPU/503.bwaves_r/src/shell_lam.F
+++ b/benchspec/CPU/503.bwaves_r/src/shell_lam.F
@@ -13,6 +13,9 @@
       integer im2,im1,ip1,ip2,jm2,jm1,jp1,jp2,km2,km1,kp1,kp2
       integer ks,ke
       integer nzl, nzl1,nzl2,nzl3,nzl4,kg,kz,kq,ierr
+#if defined(GEM5)
+      integer loop_count
+#endif
       real(kind=8) nuim,nuex2,nuex4,cfl,epsilon,dx,dy,dz,dt,rad
       real(kind=8) gm,u1,v1,w1,p1,ro1,u2,v2,w2,p2,ro2,Re,Pr,cfll,dtl
       real(kind=8) time,t1,t2,t3,t4,t5,t6,t7,t8,mu
@@ -219,6 +222,16 @@ C Flow Initialization
 
 C Propagation in time
 
+#if defined(GEM5)
+      loop_count=0
+      write (*,*)'CALL MAP '
+      call map_m5_mem()
+      write (*,*)'END CALL MAP '
+#endif
+#if defined(SPECCAST)
+      call initialize_barrier()
+#endif
+
       time=0.
 #if !defined(SPEC)
       tm=dtime(tarray)
@@ -226,6 +239,14 @@ C Propagation in time
 #endif
 
       do n=1,ni
+#if defined(SPECCAST)
+         call call_barrier()
+#endif
+#if defined(GEM5)
+         loop_Count = loop_count+1
+	      write (*,*)'BEGIN ITERATION ',loop_count
+	      call m5_work_begin(0)
+#endif
 C   Fill overlaped region
          call fill2(q,nx,ny,nzl)
 
@@ -451,6 +472,11 @@ c         print *, 'Time step: ',n,'  dt: ',dt
       gtm=gtm+tm
 #endif
 #endif
+#if defined(GEM5)
+         write (*,*)'END ITERATION ',loop_count
+	 call m5_work_end(1)
+#endif
+
 
       time=time+dt
       enddo
diff --git a/benchspec/CPU/505.mcf_r/Spec/object.pm b/benchspec/CPU/505.mcf_r/Spec/object.pm
index 57146833..05d21440 100644
--- a/benchspec/CPU/505.mcf_r/Spec/object.pm
+++ b/benchspec/CPU/505.mcf_r/Spec/object.pm
@@ -20,6 +20,9 @@ $benchlang = 'C';
     pflowup.c
     psimplex.c
     pbeampp.c
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
 
     spec_qsort/spec_qsort.c
     ));
diff --git a/benchspec/CPU/505.mcf_r/src/barrier_cast.c b/benchspec/CPU/505.mcf_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/505.mcf_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/505.mcf_r/src/barrier_cast.h b/benchspec/CPU/505.mcf_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/505.mcf_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/505.mcf_r/src/m5_mmap.c b/benchspec/CPU/505.mcf_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/505.mcf_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/505.mcf_r/src/m5_mmap.h b/benchspec/CPU/505.mcf_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/505.mcf_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/505.mcf_r/src/m5op_flags.h b/benchspec/CPU/505.mcf_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/505.mcf_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/505.mcf_r/src/m5op_x86.S b/benchspec/CPU/505.mcf_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/505.mcf_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/505.mcf_r/src/m5ops.h b/benchspec/CPU/505.mcf_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/505.mcf_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/505.mcf_r/src/mcf.c b/benchspec/CPU/505.mcf_r/src/mcf.c
index 79e3f6f4..163ce373 100644
--- a/benchspec/CPU/505.mcf_r/src/mcf.c
+++ b/benchspec/CPU/505.mcf_r/src/mcf.c
@@ -24,6 +24,17 @@ Copyright (c) 2006-2010 LBW.
 #include "mcf.h"
 #include "time.h"
 
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
+
 #define REPORT
 
 extern LONG min_impl_duration;
@@ -45,12 +56,28 @@ LONG global_opt( )
   
   new_arcs = -1;
 
+#ifdef SPECCAST
+  initialize_barrier();
+#endif
+#ifdef GEM5
+  unsigned int loop_count=0;
+  map_m5_mem();
+  
+#endif
   while( new_arcs )
   {
 #ifdef REPORT
     printf( "active arcs                : %" PRId64 "\n", net.m );
 #endif
-    
+
+#ifdef SPECCAST
+    call_barrier();
+#endif
+#ifdef GEM5
+    loop_count++;
+    printf("BEGIN ITERATION %d\n", loop_count);
+    m5_work_begin(0);
+#endif    
     primal_net_simplex( &net );
     
 #ifdef REPORT
@@ -108,6 +135,11 @@ LONG global_opt( )
 #endif
     
     residual_nb_it++;
+#ifdef GEM5
+    
+    printf("END ITERATION %d\n", loop_count);
+    m5_work_end(1);
+#endif    
   }
   
   net.optcost = flow_cost(&net);
@@ -135,10 +167,10 @@ int main( argc, argv )
     return -1;
   
 #ifndef SPEC
-  time_t startTime, endTime;
+  time_t startTime, aux1, aux2, aux3, endTime; 
   time(&startTime);
 #endif
-  
+  time_t aux1, aux2, aux3; 
   printf( "\nMCF SPEC CPU version 1.11\n" );
   printf( "Copyright (c) 1998-2000 Zuse Institut Berlin (ZIB)\n" );
   printf( "Copyright (c) 2000-2002 Andreas Loebel & ZIB\n" );
@@ -180,10 +212,13 @@ int main( argc, argv )
   printf( "nodes                      : %" PRId64 "\n", net.n_trips );
 #endif
   
-  
+  time(&aux1);
   primal_start_artificial( &net );
+  time(&aux2);
   global_opt( );
-  
+  time(&aux3);
+  printf("primal_time=%ld\n", aux2-aux1);
+  printf("global_opt_time=%ld\n", aux3-aux2);
   
   
   if( write_objective_value( outfile, &net ) )
diff --git a/benchspec/CPU/507.cactuBSSN_r/Spec/object.pm b/benchspec/CPU/507.cactuBSSN_r/Spec/object.pm
index a0febfe5..88a50fa1 100644
--- a/benchspec/CPU/507.cactuBSSN_r/Spec/object.pm
+++ b/benchspec/CPU/507.cactuBSSN_r/Spec/object.pm
@@ -390,6 +390,9 @@ $need_math='yes';
     MoL/Startup.c
     MoL/StepSize.c
     MoL/cctk_Bindings/cctk_ThornBindings.c
+    PUGH/barrier_cast.c
+    PUGH/m5_mmap.c
+    PUGH/m5op_x86.S
     PUGH/Comm.c
     PUGH/Evolve.c
     PUGH/FinishReceiveGA.c
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/Evolve.c b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/Evolve.c
index f595cd50..f802b6e2 100644
--- a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/Evolve.c
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/Evolve.c
@@ -37,6 +37,16 @@
 #include <unistd.h>
 #endif
 
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
 static const char *rcsid="$Header$";
 
 CCTK_FILEVERSION(CactusPUGH_PUGH_Evolve_c)
@@ -96,9 +106,23 @@ int PUGH_Evolve(tFleshConfig *config)
     CCTK_OutputGH(config->GH[convergence_level]);
   }
   EndForallConvLevels;
-
+#ifdef SPECCAST
+  initialize_barrier();
+#endif
+#ifdef GEM5
+  unsigned int loop_count=0;
+  map_m5_mem();
+#endif
   while (! DoneMainLoop (config->GH[0],config->GH[0]->cctk_time, iteration))
   {
+#ifdef SPECCAST
+    call_barrier();
+#endif
+#ifdef GEM5
+    loop_count++;
+    printf("BEGIN ITERATION %d\n", loop_count);
+    m5_work_begin(0);
+#endif    
     ForallConvLevels(iteration, convergence_level)
     {
       RotateTimeLevelsGH(config->GH[convergence_level]);
@@ -137,7 +161,10 @@ int PUGH_Evolve(tFleshConfig *config)
     /* Termination has been raised and broadcasted, exit loop*/
     if (cactus_terminate==TERMINATION_RAISED_BRDCAST) break;
 #endif
-
+#ifdef GEM5
+    printf("END ITERATION %d\n", loop_count);
+    m5_work_end(1);
+#endif
   } /*** END OF MAIN ITERATION LOOP ***/
 
   return 0;
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/barrier_cast.c b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/barrier_cast.h b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5_mmap.c b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5_mmap.h b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5op_flags.h b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5op_x86.S b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5ops.h b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/507.cactuBSSN_r/src/PUGH/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/508.namd_r/Spec/object.pm b/benchspec/CPU/508.namd_r/Spec/object.pm
index 4ca8cb1f..5e770732 100644
--- a/benchspec/CPU/508.namd_r/Spec/object.pm
+++ b/benchspec/CPU/508.namd_r/Spec/object.pm
@@ -12,6 +12,9 @@ $bench_cxxflags = "-DNAMD_DISABLE_SSE -DSPEC_AUTO_SUPPRESS_OPENMP";
 );
 
 @sources = (qw(
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
     Compute.C
     ComputeList.C
     ComputeNonbondedFEP.C
diff --git a/benchspec/CPU/508.namd_r/src/barrier_cast.c b/benchspec/CPU/508.namd_r/src/barrier_cast.c
new file mode 100644
index 00000000..c9b404fe
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/barrier_cast.c
@@ -0,0 +1,54 @@
+#include "barrier_cast.h"
+#include <pthread.h>
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
diff --git a/benchspec/CPU/508.namd_r/src/barrier_cast.h b/benchspec/CPU/508.namd_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/508.namd_r/src/m5_mmap.c b/benchspec/CPU/508.namd_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/508.namd_r/src/m5_mmap.h b/benchspec/CPU/508.namd_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/508.namd_r/src/m5_mmap_fortran.c b/benchspec/CPU/508.namd_r/src/m5_mmap_fortran.c
new file mode 100644
index 00000000..b5ba373b
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/m5_mmap_fortran.c
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/508.namd_r/src/m5op_flags.h b/benchspec/CPU/508.namd_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/508.namd_r/src/m5op_x86.S b/benchspec/CPU/508.namd_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/508.namd_r/src/m5ops.h b/benchspec/CPU/508.namd_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/508.namd_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/508.namd_r/src/spec_namd.C b/benchspec/CPU/508.namd_r/src/spec_namd.C
index 2803078d..0ca98099 100644
--- a/benchspec/CPU/508.namd_r/src/spec_namd.C
+++ b/benchspec/CPU/508.namd_r/src/spec_namd.C
@@ -16,6 +16,20 @@
 #include "ComputeNonbondedUtil.h"
 #include "ResultSet.h"
 
+#ifdef SPECCAST
+extern "C" {
+#include "barrier_cast.h"
+}
+#endif
+#ifdef GEM5
+extern "C" {
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+}
+#endif
+
 void exit_usage(const char *argv0) {
   printf("Usage: %s --input <file> [--output <file>] "
           "[--standard <file>] [--iterations <int>]\n",argv0);
@@ -184,7 +198,25 @@ int main(int argc, char **argv) {
   }
 
   int j=0;  // used in SET_MODE for pairlists
+
+#ifdef SPECCAST
+  initialize_barrier();
+#endif
+#ifdef GEM5
+  unsigned int loop_count=0;
+  map_m5_mem();
+#endif
+
   for ( i = 0; i < iterations; ++i ) {
+
+#ifdef SPECCAST
+    call_barrier();
+#endif
+#ifdef GEM5
+    loop_count++;
+    printf("BEGIN ITERATION %d\n", loop_count);
+    m5_work_begin(0);
+#endif
     SET_MODE(1,0,0)
     RUN_AND_CHECKSUM
     WRITE(r100)
@@ -225,6 +257,10 @@ int main(int argc, char **argv) {
     r010.compare(r011);
 
     patchList.moveatoms();
+#ifdef GEM5
+  printf("END ITERATION %d\n", loop_count);
+  m5_work_end(1);
+#endif
   }
 
   if ( benchmarkrun ) {
diff --git a/benchspec/CPU/510.parest_r/Spec/object.pm b/benchspec/CPU/510.parest_r/Spec/object.pm
index a1ed9839..030e0f5a 100644
--- a/benchspec/CPU/510.parest_r/Spec/object.pm
+++ b/benchspec/CPU/510.parest_r/Spec/object.pm
@@ -229,6 +229,9 @@ $abstol = {
     source/libparest/master/master.cc
     source/libparest/master/newton_method.cc
     source/libparest/master/step_length_control.cc
+    source/libparest/master/m5_mmap.c
+    source/libparest/master/barrier_cast.c
+    source/libparest/master/m5op_x86.S
     source/libparest/parallel/control.cc
     source/libparest/parallel/message_log.cc
     source/libparest/parallel/multiple_experiments.cc
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/barrier_cast.c b/benchspec/CPU/510.parest_r/src/source/libparest/master/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/barrier_cast.h b/benchspec/CPU/510.parest_r/src/source/libparest/master/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/m5_mmap.c b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/m5_mmap.h b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/m5op_flags.h b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/m5op_x86.S b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/m5ops.h b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/510.parest_r/src/source/libparest/master/newton_method.cc b/benchspec/CPU/510.parest_r/src/source/libparest/master/newton_method.cc
index c34a32df..6f5e0f30 100644
--- a/benchspec/CPU/510.parest_r/src/source/libparest/master/newton_method.cc
+++ b/benchspec/CPU/510.parest_r/src/source/libparest/master/newton_method.cc
@@ -24,6 +24,20 @@
 #include <numeric>
 #include <cmath>
 
+#ifdef SPECCAST
+extern "C" {
+#include "barrier_cast.h"
+}
+#endif
+#ifdef GEM5
+extern "C" {
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+}
+#endif
+
 namespace libparest
 {
   namespace Master
@@ -326,9 +340,23 @@ namespace libparest
     void
     NewtonMethod<dim>::run ()
     {
-				       
+#ifdef SPECCAST
+      initialize_barrier();
+#endif
+#ifdef GEM5
+      unsigned int loop_count=0;
+      map_m5_mem();
+#endif				       
       for (iteration_number=1; true; ++iteration_number)
-	{
+	  {
+#ifdef SPECCAST
+          call_barrier();
+#endif
+#ifdef GEM5
+          loop_count++;
+          printf("BEGIN ITERATION %d\n", loop_count);
+	  m5_work_begin(0);
+#endif
 	  initialize_gauss_newton_step ();
 	  solve_and_set_update ();
 	  compute_and_set_step_length ();
@@ -345,6 +373,10 @@ namespace libparest
 	    break;
 	  
 	  maybe_refine_grid ();
+#ifdef GEM5
+        printf("END ITERATION %d\n", loop_count);
+	m5_work_end(1);
+#endif
 	};
 
       finalize ();
diff --git a/benchspec/CPU/511.povray_r/Spec/object.pm b/benchspec/CPU/511.povray_r/Spec/object.pm
index 31c65115..bd08c86c 100644
--- a/benchspec/CPU/511.povray_r/Spec/object.pm
+++ b/benchspec/CPU/511.povray_r/Spec/object.pm
@@ -26,6 +26,9 @@ $bench_flags = '-Ifrontend -Ibase -I. -Ispec_qsort -DSPEC_AUTO_SUPPRESS_OPENMP';
         ray.cpp rendctrl.cpp render.cpp renderio.cpp reswords.cpp sor.cpp spheres.cpp sphsweep.cpp splines.cpp statspov.cpp
         super.cpp targa.cpp texture.cpp tokenize.cpp torus.cpp triangle.cpp truetype.cpp txttest.cpp userdisp.cpp userio.cpp
         vbuffer.cpp vlbuffer.cpp warps.cpp
+	m5_mmap.c
+    barrier_cast.c
+	m5op_x86.S
         base/fileinputoutput.cpp
         base/povms.cpp
         base/povmscpp.cpp
diff --git a/benchspec/CPU/511.povray_r/src/barrier_cast.c b/benchspec/CPU/511.povray_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/511.povray_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/511.povray_r/src/barrier_cast.h b/benchspec/CPU/511.povray_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/511.povray_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/511.povray_r/src/m5_mmap.c b/benchspec/CPU/511.povray_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/511.povray_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/511.povray_r/src/m5_mmap.h b/benchspec/CPU/511.povray_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/511.povray_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/511.povray_r/src/m5op_flags.h b/benchspec/CPU/511.povray_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/511.povray_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/511.povray_r/src/m5op_x86.S b/benchspec/CPU/511.povray_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/511.povray_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/511.povray_r/src/m5ops.h b/benchspec/CPU/511.povray_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/511.povray_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/511.povray_r/src/render.cpp b/benchspec/CPU/511.povray_r/src/render.cpp
index 7151cd66..5a3a1a1b 100644
--- a/benchspec/CPU/511.povray_r/src/render.cpp
+++ b/benchspec/CPU/511.povray_r/src/render.cpp
@@ -71,6 +71,20 @@
 #include "povms.h"
 #include "pov_util.h"
 
+#ifdef SPECCAST
+extern "C" {
+#include "barrier_cast.h"
+}
+#endif
+#ifdef GEM5
+extern "C" {
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+}
+#endif
+
 BEGIN_POV_NAMESPACE
 
 /*****************************************************************************
@@ -1316,9 +1330,32 @@ void Start_Non_Adaptive_Tracing()
   first_line = (opts.Options & ANTIALIAS)?opts.First_Line-1:opts.First_Line;
 
   /* Loop over all rows. */
-
+#if defined(SPECCAST) || defined(GEM5)
+  unsigned int loop_count=0;
+#endif
+#ifdef SPECCAST
+  initialize_barrier();
+#endif
+#ifdef GEM5
+  map_m5_mem();
+#endif
   for (Current_Line_Number = first_line; Current_Line_Number < opts.Last_Line; Current_Line_Number++)
   {
+#if defined(SPECCAST) || defined(GEM5)
+    loop_count++;
+    if (loop_count%128==0)
+    {
+#endif 
+#ifdef SPECCAST
+    call_barrier();
+#endif
+#ifdef GEM5
+       printf("BEGIN ITERATION %d\n", loop_count);
+       m5_work_begin(0);
+#endif
+#if defined(SPECCAST) || defined(GEM5)
+    }
+#endif
     /* Skip odd or even lines depending on the line number. */
 
     if ((skip_lines) && ((Current_Line_Number % 2) == skip_odd_lines))
@@ -1389,6 +1426,13 @@ void Start_Non_Adaptive_Tracing()
     /* Write current row to disk. */
 
     output_prev_image_line_and_advance(Current_Line_Number);
+#ifdef GEM5
+    if(loop_count%128==0)
+    {
+        printf("END ITERATION %d\n", loop_count);
+	m5_work_end(1);
+    }
+#endif    
   }
 
   Current_Line_Number = 0;
diff --git a/benchspec/CPU/519.lbm_r/Spec/object.pm b/benchspec/CPU/519.lbm_r/Spec/object.pm
index a2e72170..ed6c63ed 100644
--- a/benchspec/CPU/519.lbm_r/Spec/object.pm
+++ b/benchspec/CPU/519.lbm_r/Spec/object.pm
@@ -6,7 +6,7 @@ $benchlang = 'C';
 
 $abstol =  0.0000001;
 
-@sources = qw( lbm.c main.c );
+@sources = qw( lbm.c main.c m5_mmap.c m5op_x86.S barrier_cast.c);
 
 $bench_flags = '-DSPEC_AUTO_SUPPRESS_OPENMP';
 $need_math = 'yes';
diff --git a/benchspec/CPU/519.lbm_r/src/barrier_cast.c b/benchspec/CPU/519.lbm_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/519.lbm_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/519.lbm_r/src/barrier_cast.h b/benchspec/CPU/519.lbm_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/519.lbm_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/519.lbm_r/src/m5_mmap.c b/benchspec/CPU/519.lbm_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/519.lbm_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/519.lbm_r/src/m5_mmap.h b/benchspec/CPU/519.lbm_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/519.lbm_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/519.lbm_r/src/m5op_flags.h b/benchspec/CPU/519.lbm_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/519.lbm_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/519.lbm_r/src/m5op_x86.S b/benchspec/CPU/519.lbm_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/519.lbm_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/519.lbm_r/src/m5ops.h b/benchspec/CPU/519.lbm_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/519.lbm_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/519.lbm_r/src/main.c b/benchspec/CPU/519.lbm_r/src/main.c
index ff31711d..924169f0 100644
--- a/benchspec/CPU/519.lbm_r/src/main.c
+++ b/benchspec/CPU/519.lbm_r/src/main.c
@@ -16,6 +16,17 @@
 
 #include <sys/stat.h>
 
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
+
 /*############################################################################*/
 
 static LBM_GridPtr srcGrid, dstGrid;
@@ -35,8 +46,22 @@ int main( int nArgs, char* arg[] ) {
 #if !defined(SPEC)
 	MAIN_startClock( &time );
 #endif
-
+#if defined(SPECCAST)
+  	initialize_barrier();
+#endif
+#if defined(GEM5)
+        unsigned int loop_count=0;
+	map_m5_mem();
+#endif
 	for( t = 1; t <= param.nTimeSteps; t++ ) {
+#if defined(SPECCAST)
+    	call_barrier();
+#endif
+#if defined(GEM5)
+                loop_count++;
+		printf("BEGIN ITERATION %d\n", loop_count);
+		m5_work_begin(0);
+#endif
 		if( param.simType == CHANNEL ) {
 			LBM_handleInOutFlow( *srcGrid );
 		}
@@ -48,6 +73,10 @@ int main( int nArgs, char* arg[] ) {
 			printf( "timestep: %i\n", t );
 			LBM_showGridStatistics( *srcGrid );
 		}
+#if defined(GEM5)
+                printf("END ITERATION %d\n", loop_count);
+		m5_work_end(1);
+#endif
 	}
 
 #if !defined(SPEC)
diff --git a/benchspec/CPU/520.omnetpp_r/Spec/object.pm b/benchspec/CPU/520.omnetpp_r/Spec/object.pm
index c260700b..782d62fb 100644
--- a/benchspec/CPU/520.omnetpp_r/Spec/object.pm
+++ b/benchspec/CPU/520.omnetpp_r/Spec/object.pm
@@ -178,6 +178,9 @@ $bench_flags = '-Isimulator/platdep -Isimulator -Imodel -DWITH_NETBUILDER -DSPEC
     simulator/cpsquare.cc
     simulator/indexedfileoutvectormgr.cc
     simulator/intervals.cc
+    simulator/m5_mmap.c
+    simulator/m5op_x86.S
+    simulator/barrier_cast.c
     model/MACRelayUnitBase.cc
     model/Ieee802Ctrl_m.cc
     model/EtherEncap.cc
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/barrier_cast.c b/benchspec/CPU/520.omnetpp_r/src/simulator/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/barrier_cast.h b/benchspec/CPU/520.omnetpp_r/src/simulator/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/cmdenv.cc b/benchspec/CPU/520.omnetpp_r/src/simulator/cmdenv.cc
index c0a84394..6c5b2f05 100644
--- a/benchspec/CPU/520.omnetpp_r/src/simulator/cmdenv.cc
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/cmdenv.cc
@@ -41,6 +41,20 @@
 #include "cproperties.h"
 #include "cproperty.h"
 
+#ifdef SPECCAST
+extern "C" {
+#include "barrier_cast.h"
+}
+#endif
+#ifdef GEM5
+extern "C" {
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+}
+#endif
+
 USING_NAMESPACE
 
 Register_GlobalConfigOption(CFGID_CONFIG_NAME, "cmdenv-config-name", CFG_STRING, NULL, "Specifies the name of the configuration to be run (for a value `Foo', section [Config Foo] will be used from the ini file). See also cmdenv-runs-to-execute=. The -c command line option overrides this setting.")
@@ -389,10 +403,33 @@ void Cmdenv::simulate()
 #endif
 
             doStatusUpdate(speedometer);
-
+#if defined(SPECCAST) || defined(GEM5)
+            unsigned int loop_count=0;
+#endif
+#if defined(SPECCAST)
+            initialize_barrier();
+#endif
+#if defined(GEM5)
+	    map_m5_mem();
+#endif
             while (true)
             {
-                cSimpleModule *mod = simulation.selectNextModule();
+#if defined(SPECCAST) || defined(GEM5)
+                loop_count++;
+		        if (loop_count%1000000==0)
+		        {
+#endif
+#if defined(SPECCAST)
+    	            call_barrier();
+#endif
+#if defined(GEM5)
+		            ::fprintf(fout, "BEGIN ITERATION %d\n", loop_count);
+		            m5_work_begin(0);
+#endif
+#if defined(SPECCAST) || defined(GEM5)
+                }
+#endif
+		cSimpleModule *mod = simulation.selectNextModule();
                 if (!mod)
                     throw cTerminationException("scheduler interrupted while waiting");
 
@@ -410,7 +447,14 @@ void Cmdenv::simulate()
                 checkTimeLimits();  //XXX potential performance hog (maybe check every 256 events, unless "cmdenv-strict-limits" is on?)
                 if (sigint_received)
                     throw cTerminationException("SIGINT or SIGTERM received, exiting");
-            }
+#if defined(GEM5)
+		if (loop_count%1000000==0)
+		{
+		    ::fprintf(fout, "END ITERATION %d\n", loop_count);
+		    m5_work_end(1);
+		}
+#endif
+	    }
         }
     }
     catch (cTerminationException& e)
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/m5_mmap.c b/benchspec/CPU/520.omnetpp_r/src/simulator/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/m5_mmap.h b/benchspec/CPU/520.omnetpp_r/src/simulator/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/m5op_flags.h b/benchspec/CPU/520.omnetpp_r/src/simulator/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/m5op_x86.S b/benchspec/CPU/520.omnetpp_r/src/simulator/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/520.omnetpp_r/src/simulator/m5ops.h b/benchspec/CPU/520.omnetpp_r/src/simulator/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/520.omnetpp_r/src/simulator/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/521.wrf_r/Spec/object.pm b/benchspec/CPU/521.wrf_r/Spec/object.pm
index 4dcaaa8e..fce66ff2 100644
--- a/benchspec/CPU/521.wrf_r/Spec/object.pm
+++ b/benchspec/CPU/521.wrf_r/Spec/object.pm
@@ -382,6 +382,9 @@ $binary = {
         msntf1.F90
         my_strtok.c
         nest_init_utils.F90
+    barrier_cast.c
+	m5_mmap.c
+	m5op_x86.S
         netcdf/attr.c
         netcdf/dim.c
         netcdf/error.c
diff --git a/benchspec/CPU/521.wrf_r/src/barrier_cast.c b/benchspec/CPU/521.wrf_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/521.wrf_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/521.wrf_r/src/barrier_cast.h b/benchspec/CPU/521.wrf_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/521.wrf_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/521.wrf_r/src/m5_mmap.c b/benchspec/CPU/521.wrf_r/src/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/521.wrf_r/src/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/521.wrf_r/src/m5_mmap.h b/benchspec/CPU/521.wrf_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/521.wrf_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/521.wrf_r/src/m5op_flags.h b/benchspec/CPU/521.wrf_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/521.wrf_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/521.wrf_r/src/m5op_x86.S b/benchspec/CPU/521.wrf_r/src/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/521.wrf_r/src/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/521.wrf_r/src/m5ops.h b/benchspec/CPU/521.wrf_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/521.wrf_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/521.wrf_r/src/module_integrate.F90 b/benchspec/CPU/521.wrf_r/src/module_integrate.F90
index a052357b..7afd11e0 100644
--- a/benchspec/CPU/521.wrf_r/src/module_integrate.F90
+++ b/benchspec/CPU/521.wrf_r/src/module_integrate.F90
@@ -19,6 +19,30 @@ RECURSIVE SUBROUTINE integrate ( grid )
 
    IMPLICIT NONE
 
+#ifdef SPECAST
+     interface
+       subroutine initialize_barrier() bind(C)
+       end subroutine initialize_barrier
+       subroutine call_barrier() bind(C)
+       end subroutine call_barrier
+     end interface
+#endif
+
+#ifdef GEM5
+     interface
+       subroutine m5_map_mem() bind(C)
+       end subroutine m5_map_mem
+       subroutine m5_work_begin(val) bind(C)
+         use iso_c_binding, only: c_int
+         integer(c_int), value :: val
+       end subroutine m5_work_begin
+       subroutine m5_work_end(val2) bind(C)
+         use iso_c_binding, only: c_int
+	 integer(c_int), value :: val2
+       end subroutine m5_work_end
+     end interface
+#endif
+
    !  Input data.
 
    TYPE(domain) , POINTER :: grid
@@ -156,7 +180,9 @@ RECURSIVE SUBROUTINE integrate ( grid )
    LOGICAL , EXTERNAL                     :: wrf_dm_on_monitor
    INTEGER                                :: idum1 , idum2 , ierr , open_status
    LOGICAL                                :: should_do_last_io
-
+#ifdef GEM5
+   INTEGER :: loop_count = 0   
+#endif
    ! interface
    INTERFACE
        ! mediation-supplied solver
@@ -271,6 +297,13 @@ RECURSIVE SUBROUTINE integrate ( grid )
    ! this point for debugging purposes.  
    CALL set_current_grid_ptr( grid )
 
+#ifdef GEM5
+   call map_m5_mem()
+#endif
+#ifdef SPECCAST
+         call initialize_barrier()
+#endif
+
    IF ( .NOT. domain_clockisstoptime( grid ) ) THEN
       CALL model_to_grid_config_rec ( grid%id , model_config_rec , config_flags )
       IF ( config_flags%grid_allowed ) THEN
@@ -279,6 +312,14 @@ RECURSIVE SUBROUTINE integrate ( grid )
             IF ( wrf_dm_on_monitor() ) THEN
                CALL start_timing
             END IF
+#ifdef SPECCAST
+      call call_barrier()
+#endif
+#ifdef GEM5	    
+	    loop_count = loop_count + 1
+	    print *,'BEGIN ITERATION ',loop_count
+	    call m5_work_begin(0)
+#endif
             CALL med_setup_step ( grid , config_flags )
             a_nest_was_opened = .false.
             ! for each nest whose time has come...
@@ -368,7 +409,11 @@ RECURSIVE SUBROUTINE integrate ( grid )
 #endif
                CALL end_timing ( TRIM(message) )
             END IF
-            CALL med_endup_step ( grid , config_flags )
+#ifdef GEM5
+            print *,'END ITERATION ',loop_count
+	    call m5_work_end(1)
+#endif
+	    CALL med_endup_step ( grid , config_flags )
          END DO
 
          ! Accumulation calculation for DFI
diff --git a/benchspec/CPU/523.xalancbmk_r/Spec/object.pm b/benchspec/CPU/523.xalancbmk_r/Spec/object.pm
index e4e151bc..e56d2eec 100644
--- a/benchspec/CPU/523.xalancbmk_r/Spec/object.pm
+++ b/benchspec/CPU/523.xalancbmk_r/Spec/object.pm
@@ -785,6 +785,9 @@ $bench_cxxflags .= ' -DXERCES_NO_ASM' if ($^O =~ /MSWin32/i);
     XercesXPath.cpp
     YearDatatypeValidator.cpp
     YearMonthDatatypeValidator.cpp
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
     ));
 
 use File::Basename;
diff --git a/benchspec/CPU/523.xalancbmk_r/src/XalanTransformer.cpp b/benchspec/CPU/523.xalancbmk_r/src/XalanTransformer.cpp
index f5d8068a..f8a3542f 100644
--- a/benchspec/CPU/523.xalancbmk_r/src/XalanTransformer.cpp
+++ b/benchspec/CPU/523.xalancbmk_r/src/XalanTransformer.cpp
@@ -91,6 +91,19 @@
 #include "xalanc/XalanTransformer/XalanTransformerProblemListener.hpp"
 #include "xalanc/XalanTransformer/XercesDOMParsedSource.hpp"
 
+#ifdef SPECCAST
+extern "C" {
+#include "barrier_cast.h"
+}
+#endif
+#ifdef GEM5
+extern "C" {
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+}
+#endif
 
 
 XALAN_CPP_NAMESPACE_BEGIN
@@ -552,7 +565,6 @@ XalanTransformer::compileStylesheet(
     XalanDOMString  theErrorMessage(m_memoryManager);
 
     int     theResult = 0;
-
     try
     {
         // Create some support objects that are necessary for running the processor...
@@ -732,8 +744,22 @@ XalanTransformer::parseSource(
     m_errorMessage.clear();
     m_errorMessage.push_back(0);
 
+#ifdef SPECCAST
+  initialize_barrier();
+#endif
+#ifdef GEM5
+    map_m5_mem();
+#endif
+
     int theResult = 0;
 
+#ifdef SPECCAST
+    call_barrier();
+#endif
+#ifdef GEM5
+    m5_work_begin(0);
+#endif
+
     try
     {
         // Allocate the memory now, to avoid leaking if push_back() fails.
@@ -808,6 +834,9 @@ XalanTransformer::parseSource(
         theResult = -4;
     }
 
+#ifdef GEM5
+    m5_work_end(1);
+#endif
     return theResult;
 }
 
diff --git a/benchspec/CPU/523.xalancbmk_r/src/barrier_cast.c b/benchspec/CPU/523.xalancbmk_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/523.xalancbmk_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/523.xalancbmk_r/src/barrier_cast.h b/benchspec/CPU/523.xalancbmk_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/523.xalancbmk_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/523.xalancbmk_r/src/m5_mmap.c b/benchspec/CPU/523.xalancbmk_r/src/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/523.xalancbmk_r/src/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/523.xalancbmk_r/src/m5_mmap.h b/benchspec/CPU/523.xalancbmk_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/523.xalancbmk_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/523.xalancbmk_r/src/m5op_flags.h b/benchspec/CPU/523.xalancbmk_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/523.xalancbmk_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/523.xalancbmk_r/src/m5op_x86.S b/benchspec/CPU/523.xalancbmk_r/src/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/523.xalancbmk_r/src/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/523.xalancbmk_r/src/m5ops.h b/benchspec/CPU/523.xalancbmk_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/523.xalancbmk_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/525.x264_r/Spec/object.pm b/benchspec/CPU/525.x264_r/Spec/object.pm
index f71321b2..88ee308a 100644
--- a/benchspec/CPU/525.x264_r/Spec/object.pm
+++ b/benchspec/CPU/525.x264_r/Spec/object.pm
@@ -54,6 +54,9 @@ $dependent_workloads = 1;
         x264_src/output/flv_bytestream.c
         x264_src/input/thread.c
         x264_src/x264.c
+    x264_src/barrier_cast.c
+	x264_src/m5_mmap.c
+	x264_src/m5op_x86.S
         x264_src/extras/getopt.c
         )],
     'ldecod_r' => [qw(
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/barrier_cast.c b/benchspec/CPU/525.x264_r/src/x264_src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/525.x264_r/src/x264_src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/barrier_cast.h b/benchspec/CPU/525.x264_r/src/x264_src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/525.x264_r/src/x264_src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/m5_mmap.c b/benchspec/CPU/525.x264_r/src/x264_src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/525.x264_r/src/x264_src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/m5_mmap.h b/benchspec/CPU/525.x264_r/src/x264_src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/525.x264_r/src/x264_src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/m5op_flags.h b/benchspec/CPU/525.x264_r/src/x264_src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/525.x264_r/src/x264_src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/m5op_x86.S b/benchspec/CPU/525.x264_r/src/x264_src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/525.x264_r/src/x264_src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/m5ops.h b/benchspec/CPU/525.x264_r/src/x264_src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/525.x264_r/src/x264_src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/525.x264_r/src/x264_src/x264.c b/benchspec/CPU/525.x264_r/src/x264_src/x264.c
index 0b818ef8..d434e158 100644
--- a/benchspec/CPU/525.x264_r/src/x264_src/x264.c
+++ b/benchspec/CPU/525.x264_r/src/x264_src/x264.c
@@ -41,6 +41,16 @@
 #define SetConsoleTitle(t)
 #endif
 
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
 #ifdef SPEC
 int seek_val=0;
 #endif
@@ -1486,11 +1496,26 @@ static int  Encode( x264_param_t *param, cli_opt_t *opt )
 
     if( opt->tcfile_out )
         fprintf( opt->tcfile_out, "# timecode format v2\n" );
-
+#ifdef SPECCAST
+    initialize_barrier();
+#endif
+#ifdef GEM5
+    unsigned int loop_count=0;
+    map_m5_mem();
+#endif
     /* Encode frames */
     for( i_frame = 0, i_frame_output = 0; b_ctrl_c == 0 && (i_frame < i_frame_total || i_frame_total == 0); )
     {
-        if( input.read_frame( &pic, opt->hin, i_frame + opt->i_seek ) )
+#ifdef SPECCAST
+        call_barrier();
+#endif
+#ifdef GEM5
+        loop_count++;
+	fprintf(stdout, "BEGIN ITERATION %d\n", loop_count);
+	m5_work_begin(0);
+#endif
+	
+	if( input.read_frame( &pic, opt->hin, i_frame + opt->i_seek ) )
             break;
 
         if( !param->b_vfr_input )
@@ -1556,6 +1581,10 @@ static int  Encode( x264_param_t *param, cli_opt_t *opt )
         /* update status line (up to 1000 times per input file) */
         if( opt->b_progress && i_frame_output % i_update_interval == 0 && i_frame_output )
             Print_status( i_start, i_frame_output, i_frame_total, i_file, param, 2 * last_dts - prev_dts - first_dts );
+#ifdef GEM5
+	fprintf(stdout, "END ITERATION %d\n", loop_count);
+	m5_work_end(1);
+#endif
     }
     /* Flush delayed frames */
     while( !b_ctrl_c && x264_encoder_delayed_frames( h ) )
diff --git a/benchspec/CPU/526.blender_r/Spec/object.pm b/benchspec/CPU/526.blender_r/Spec/object.pm
index 99a98ade..7832fffa 100644
--- a/benchspec/CPU/526.blender_r/Spec/object.pm
+++ b/benchspec/CPU/526.blender_r/Spec/object.pm
@@ -491,6 +491,9 @@ if ($^O =~ /MSWin32/i && !$ENV{'SPEC_NOT_REALLY_WINDOWS'}) {
         blender/source/blender/render/intern/source/volumetric.c
         blender/source/blender/render/intern/source/voxeldata.c
         blender/source/blender/render/intern/source/zbuf.c
+	blender/source/blender/render/intern/source/m5_mmap.c
+	blender/source/blender/render/intern/source/m5op_x86.S
+    blender/source/blender/render/intern/source/barrier_cast.c
         blender/source/blender/ikplugin/intern/ikplugin_api.c
         blender/source/blender/modifiers/intern/MOD_armature.c
         blender/source/blender/modifiers/intern/MOD_array.c
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/blenlib/intern/threads.c b/benchspec/CPU/526.blender_r/src/blender/source/blender/blenlib/intern/threads.c
index 28ca601b..12aa942e 100644
--- a/benchspec/CPU/526.blender_r/src/blender/source/blender/blenlib/intern/threads.c
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/blenlib/intern/threads.c
@@ -842,49 +842,16 @@ void *BLI_thread_queue_pop(ThreadQueue *queue)
 	return work;
 }
 
-static void wait_timeout(struct timespec *timeout, int ms)
-{
-	ldiv_t div_result;
-	long sec, usec, x;
-
-#ifdef WIN32
-	{
-		struct _timeb now;
-		_ftime(&now);
-		sec = now.time;
-		usec = now.millitm * 1000; /* microsecond precision would be better */
-	}
-#else
-	{
-		struct timeval now;
-		gettimeofday(&now, NULL);
-		sec = now.tv_sec;
-		usec = now.tv_usec;
-	}
-#endif
-
-	/* add current time + millisecond offset */
-	div_result = ldiv(ms, 1000);
-	timeout->tv_sec = sec + div_result.quot;
-
-	x = usec + (div_result.rem * 1000);
 
-	if (x >= 1000000) {
-		timeout->tv_sec++;
-		x -= 1000000;
-	}
-
-	timeout->tv_nsec = x * 1000;
-}
 
 void *BLI_thread_queue_pop_timeout(ThreadQueue *queue, int ms)
 {
 	double t;
 	void *work = NULL;
-	struct timespec timeout;
+	/*struct timespec timeout;*/
 
 	t = PIL_check_seconds_timer();
-	wait_timeout(&timeout, ms);
+	/*wait_timeout(&timeout, ms);*/
 
 	/* wait until there is work */
 #if !defined(SPEC)
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/barrier_cast.c b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/barrier_cast.h b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5_mmap.c b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5_mmap.h b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5op_flags.h b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5op_x86.S b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5ops.h b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/pipeline.c b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/pipeline.c
index c112f3da..577fb34c 100644
--- a/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/pipeline.c
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/render/intern/source/pipeline.c
@@ -35,6 +35,17 @@
 #include <stdlib.h>
 #include <stddef.h>
 
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+
 #include "DNA_image_types.h"
 #include "DNA_node_types.h"
 #include "DNA_object_types.h"
@@ -1117,6 +1128,13 @@ static void threaded_tile_processor(Render *re)
 	rctf viewplane = re->viewplane;
 	double lastdraw, elapsed, redrawtime = 1.0f;
 	int totpart = 0, minx = 0, slice = 0, a, wait;
+#ifdef GEM5
+        unsigned int loop_count=0;
+        map_m5_mem();
+#endif	
+#ifdef SPECCAST
+	initialize_barrier();
+#endif
 	
 	BLI_rw_mutex_lock(&re->resultmutex, THREAD_LOCK_WRITE);
 
@@ -1190,6 +1208,14 @@ static void threaded_tile_processor(Render *re)
 		lastdraw = PIL_check_seconds_timer();
 		
 		while (1) {
+#ifdef SPECCAST
+			call_barrier();
+#endif
+#ifdef GEM5
+                        loop_count++;
+                        printf("BEGIN ITERATION %d\n", loop_count);
+                        m5_work_begin(0);
+#endif  		
 			elapsed = PIL_check_seconds_timer() - lastdraw;
 			wait = (redrawtime - elapsed)*1000;
 			
@@ -1225,6 +1251,11 @@ static void threaded_tile_processor(Render *re)
 				
 				lastdraw = PIL_check_seconds_timer();
 			}
+#ifdef GEM5
+    
+                        printf("END ITERATION %d\n", loop_count);
+                        m5_work_end(1);
+#endif			
 		}
 		
 		BLI_end_threads(&threads);
@@ -1323,9 +1354,11 @@ static void do_render_3d(Render *re)
 	
 	/* make render verts/faces/halos/lamps */
 	if (render_scene_needs_vector(re)) {
+		
 		RE_Database_FromScene_Vectors(re, re->main, re->scene, re->lay);
 	}
 	else {
+		fprintf(stderr, "POR AQUI 1\n");
 		RE_Database_FromScene(re, re->main, re->scene, re->lay, 1);
 		RE_Database_Preprocess(re);
 	}
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/barrier_cast.c b/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/barrier_cast.h b/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/wm.c b/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/wm.c
index d05cc572..bbb43058 100644
--- a/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/wm.c
+++ b/benchspec/CPU/526.blender_r/src/blender/source/blender/windowmanager/intern/wm.c
@@ -483,8 +483,15 @@ void wm_close_and_free_all(bContext *C, ListBase *wmlist)
 
 void WM_main(bContext *C)
 {
+#ifdef GEM5
+	unsigned loop_count=0;
+#endif
 	while (1) {
 		
+#ifdef GEM5
+		loop_count++;
+		fprintf(stderr, "BEGIN ITERATION %d\n", loop_count);
+#endif
 		/* get events from ghost, handle window events, add to window queues */
 		wm_window_process_events(C); 
 		
@@ -496,6 +503,9 @@ void WM_main(bContext *C)
 		
 		/* execute cached changes draw */
 		wm_draw_update(C);
+#ifdef GEM5
+		fprintf(stderr, "END ITERATION %d\n", loop_count);
+#endif		
 	}
 }
 
diff --git a/benchspec/CPU/526.blender_r/src/blender/source/creator/creator.c b/benchspec/CPU/526.blender_r/src/blender/source/creator/creator.c
index db85d882..8ee5aa3d 100644
--- a/benchspec/CPU/526.blender_r/src/blender/source/creator/creator.c
+++ b/benchspec/CPU/526.blender_r/src/blender/source/creator/creator.c
@@ -1790,7 +1790,7 @@ int main(
 			WM_init_splash(C);
 		}
 	}
-
+        fprintf(stderr, "\n* PASO POR AQUI * \n\n");
 	WM_main(C);
 
 	return 0;
diff --git a/benchspec/CPU/527.cam4_r/Spec/object.pm b/benchspec/CPU/527.cam4_r/Spec/object.pm
index 581545c7..30440439 100644
--- a/benchspec/CPU/527.cam4_r/Spec/object.pm
+++ b/benchspec/CPU/527.cam4_r/Spec/object.pm
@@ -490,6 +490,9 @@ $bench_cflags      = $all_lang_flags
         wrf_message.F90
         zeff.f90
         zenith.F90
+    barrier_cast.c
+	m5_mmap.c
+	m5op_x86.S
         netcdf/attr.c
         netcdf/dim.c
         netcdf/error.c
diff --git a/benchspec/CPU/527.cam4_r/src/atm_comp_mct.F90 b/benchspec/CPU/527.cam4_r/src/atm_comp_mct.F90
index 02a07f3a..17bc8ed4 100644
--- a/benchspec/CPU/527.cam4_r/src/atm_comp_mct.F90
+++ b/benchspec/CPU/527.cam4_r/src/atm_comp_mct.F90
@@ -54,6 +54,29 @@ module atm_comp_mct
   save
   private ! except
 
+#ifdef SPECAST
+     interface
+       subroutine initialize_barrier() bind(C)
+       end subroutine initialize_barrier
+       subroutine call_barrier() bind(C)
+       end subroutine call_barrier
+     end interface
+#endif  
+#ifdef GEM5
+     interface
+       subroutine m5_map_mem() bind(C)
+       end subroutine m5_map_mem
+       subroutine m5_work_begin(val) bind(C)
+         use iso_c_binding, only: c_int
+         integer(c_int), value :: val
+       end subroutine m5_work_begin
+       subroutine m5_work_end(val2) bind(C)
+         use iso_c_binding, only: c_int
+	 integer(c_int), value :: val2
+       end subroutine m5_work_end
+     end interface
+#endif  
+
 !--------------------------------------------------------------------------
 ! Public interfaces
 !--------------------------------------------------------------------------
@@ -168,6 +191,8 @@ CONTAINS
     integer :: hdim1_d, hdim2_d ! dimensions of rectangular horizontal grid
                                 ! data structure, If 1D data structure, then
                                 ! hdim2_d == 1.
+    
+    
     !-----------------------------------------------------------------------
     !
     ! Determine cdata points
@@ -353,7 +378,15 @@ CONTAINS
        call shr_file_getLogUnit (shrlogunit)
        call shr_file_getLogLevel(shrloglev)
        call shr_file_setLogUnit (iulog)
-
+       
+#ifdef SPECCAST
+       call initialize_barrier()
+#endif       
+#ifdef GEM5
+       write(*,*)'ROI BEGIN'
+       call map_m5_mem()
+#endif   
+       
        call seq_timemgr_EClockGetData(EClock,curr_ymd=CurrentYMD, StepNo=StepNo, dtime=DTime_Sync )
        if (StepNo == 0) then
           call atm_import_mct( x2a_a, cam_in )
@@ -462,6 +495,10 @@ CONTAINS
     character(len=*), parameter :: subname="atm_run_mct"
     !-----------------------------------------------------------------------
     integer :: lbnum
+#ifdef GEM5
+    integer :: loop_count = 0   
+#endif
+
 
 #if (defined _MEMTRACE)
     if(masterproc) then
@@ -503,7 +540,14 @@ CONTAINS
        ! Determine if dosend
        ! When time is not updated at the beginning of the loop - then return only if
        ! are in sync with clock before time is updated
-       
+#ifdef SPECCAST
+       call call_barrier()
+#endif
+#ifdef GEM5
+       loop_count = loop_count + 1
+       write(*,*)'BEGIN ITERATION'
+       call m5_work_begin(0)
+#endif       
        call get_curr_date( yr, mon, day, tod )
        ymd = yr*10000 + mon*100 + day
        tod = tod
@@ -544,10 +588,13 @@ CONTAINS
        call t_stopf  ('CAM_adv_timestep')
        
        ! Run cam radiation/clouds (run1)
-          
+       
+
+   
        call t_startf ('CAM_run1')
        call cam_run1 ( cam_in, cam_out ) 
        call t_stopf  ('CAM_run1')
+
        
        ! Map output from cam to mct data structures
        
@@ -568,6 +615,11 @@ CONTAINS
           call mct_aVect_accum( aVin=a2x_a_SNAP, aVout=a2x_a_SUM )
           avg_count = avg_count + 1
        endif
+
+#ifdef GEM5
+       write(*,*)'END ITERATION'
+       call m5_work_end(1)
+#endif
        
     end do
 
diff --git a/benchspec/CPU/527.cam4_r/src/barrier_cast.c b/benchspec/CPU/527.cam4_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/527.cam4_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/527.cam4_r/src/barrier_cast.h b/benchspec/CPU/527.cam4_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/527.cam4_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/527.cam4_r/src/m5_mmap.c b/benchspec/CPU/527.cam4_r/src/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/527.cam4_r/src/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/527.cam4_r/src/m5_mmap.h b/benchspec/CPU/527.cam4_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/527.cam4_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/527.cam4_r/src/m5op_flags.h b/benchspec/CPU/527.cam4_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/527.cam4_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/527.cam4_r/src/m5op_x86.S b/benchspec/CPU/527.cam4_r/src/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/527.cam4_r/src/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/527.cam4_r/src/m5ops.h b/benchspec/CPU/527.cam4_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/527.cam4_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/527.cam4_r/src/validate-cam.f90 b/benchspec/CPU/527.cam4_r/src/validate-cam.f90
index ce0414e9..d7742d16 100644
--- a/benchspec/CPU/527.cam4_r/src/validate-cam.f90
+++ b/benchspec/CPU/527.cam4_r/src/validate-cam.f90
@@ -22,6 +22,8 @@ program main
 
    implicit none
 
+
+
    integer, parameter :: r8 = selected_real_kind(12)
 
    ! files containing T field
@@ -32,7 +34,6 @@ program main
    integer, parameter :: nlat =  96  ! number of latitudes in grid
    integer, parameter :: nlev =  26  ! number of levels in grid
    integer, parameter :: ntim =  97  ! number of time samples in control file
-
    real(r8) :: t1(nlon,nlat,nlev)  ! temperature field from 1st file
    real(r8) :: t2(nlon,nlat,nlev)  ! temperature field from 2nd file
 
@@ -90,7 +91,6 @@ program main
    rms_diff_ratio_max = 0.0
    ! loop over time samples in benchmark file
    do nt = 1, ntim_bench
-
       ! extract 3D fields
       status = nf90_get_var(ncid1, vid1, t1, start=(/1,1,1,nt/), count=(/nlon,nlat,nlev,1/) )
       if(status /= nf90_NoErr) call handle_err(status)
@@ -120,7 +120,8 @@ program main
             endif
           enddo
         enddo
-      enddo 
+      enddo
+      
    enddo
 
    ! print test results
diff --git a/benchspec/CPU/531.deepsjeng_r/Spec/object.pm b/benchspec/CPU/531.deepsjeng_r/Spec/object.pm
index 45b8ac77..43f77998 100644
--- a/benchspec/CPU/531.deepsjeng_r/Spec/object.pm
+++ b/benchspec/CPU/531.deepsjeng_r/Spec/object.pm
@@ -29,6 +29,9 @@ $bench_flags = '-DSMALL_MEMORY -DSPEC_AUTO_SUPPRESS_OPENMP';
     state.cpp
     ttable.cpp
     utils.cpp
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
     ));
 
 sub invoke {
diff --git a/benchspec/CPU/531.deepsjeng_r/src/barrier_cast.c b/benchspec/CPU/531.deepsjeng_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/531.deepsjeng_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/531.deepsjeng_r/src/barrier_cast.h b/benchspec/CPU/531.deepsjeng_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/531.deepsjeng_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/531.deepsjeng_r/src/m5_mmap.c b/benchspec/CPU/531.deepsjeng_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/531.deepsjeng_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/531.deepsjeng_r/src/m5_mmap.h b/benchspec/CPU/531.deepsjeng_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/531.deepsjeng_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/531.deepsjeng_r/src/m5op_flags.h b/benchspec/CPU/531.deepsjeng_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/531.deepsjeng_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/531.deepsjeng_r/src/m5op_x86.S b/benchspec/CPU/531.deepsjeng_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/531.deepsjeng_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/531.deepsjeng_r/src/m5ops.h b/benchspec/CPU/531.deepsjeng_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/531.deepsjeng_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/531.deepsjeng_r/src/search.cpp b/benchspec/CPU/531.deepsjeng_r/src/search.cpp
index 5b0f2bb0..ba175460 100644
--- a/benchspec/CPU/531.deepsjeng_r/src/search.cpp
+++ b/benchspec/CPU/531.deepsjeng_r/src/search.cpp
@@ -33,6 +33,20 @@
 #include "squares.h"
 #include "search.h"
 
+#ifdef SPECCAST
+extern "C" {
+#include "barrier_cast.h"
+}
+#endif
+#ifdef GEM5
+extern "C" {
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+}
+#endif
+
 static const int rc_index[14] = {
     0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 2, 2, 0
 };
@@ -1738,10 +1752,24 @@ move_s think(gamestate_t *g, state_t *s) {
     gamestate.cur_score = 0;
 
     gamestate.i_depth = 1;
-
+#ifdef SPECCAST
+    initialize_barrier();
+#endif
+#if defined GEM5
+    unsigned int loop_count=0;
+    map_m5_mem();
+#endif
     for (;
          gamestate.i_depth <= std::min(40, gamestate.maxdepth);
          gamestate.i_depth++) {
+#ifdef SPECCAST
+         call_barrier();
+#endif
+#if defined GEM5
+         loop_count++;
+	 myprintf("BEGIN ITERATION %d\n",loop_count);
+	 m5_work_begin(0);
+#endif
 
         if (uci_mode) {
             s->TTStores >>= 1;
@@ -1874,6 +1902,11 @@ move_s think(gamestate_t *g, state_t *s) {
         if (gamestate.time_exit) {
             break;
         }
+#if defined GEM5
+         myprintf("END ITERATION %d\n",loop_count);
+	 m5_work_end(1);
+#endif
+
     }
 
     if (comp_move == 0) {
diff --git a/benchspec/CPU/538.imagick_r/Spec/object.pm b/benchspec/CPU/538.imagick_r/Spec/object.pm
index 128601df..5c29ac0f 100644
--- a/benchspec/CPU/538.imagick_r/Spec/object.pm
+++ b/benchspec/CPU/538.imagick_r/Spec/object.pm
@@ -96,6 +96,9 @@ $need_math = 'yes';
         magick/utility.c
         magick/version.c
         magick/xml-tree.c
+	magick/m5op_x86.S
+	magick/m5_mmap.c
+        magick/barrier_cast.c
         utilities/convert.c
         wand/convert.c
         wand/drawing-wand.c
@@ -106,7 +109,7 @@ $need_math = 'yes';
         wand/magick-property.c
         wand/pixel-iterator.c
         wand/wand.c
-        magick/deprecate.c
+	magick/deprecate.c
         ) ],
     'imagevalidate_538' => [ qw(
         image_validator/ImageValidator.c
diff --git a/benchspec/CPU/538.imagick_r/src/barrier_cast.c b/benchspec/CPU/538.imagick_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/538.imagick_r/src/barrier_cast.h b/benchspec/CPU/538.imagick_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/538.imagick_r/src/magick/barrier_cast.c b/benchspec/CPU/538.imagick_r/src/magick/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/magick/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/538.imagick_r/src/magick/barrier_cast.h b/benchspec/CPU/538.imagick_r/src/magick/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/magick/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/538.imagick_r/src/magick/effect.c b/benchspec/CPU/538.imagick_r/src/magick/effect.c
index cc3d29b9..2ccccaed 100644
--- a/benchspec/CPU/538.imagick_r/src/magick/effect.c
+++ b/benchspec/CPU/538.imagick_r/src/magick/effect.c
@@ -94,6 +94,12 @@
 #ifdef MAGICKCORE_CLPERFMARKER
 #include "CLPerfMarker.h"
 #endif
+
+/*#ifdef GEM5
+#include "m5ops.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif*/
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -1302,6 +1308,10 @@ MagickExport Image *EdgeImage(const Image *image,const double radius,
       kernel_info=DestroyKernelInfo(kernel_info);
       ThrowImageException(ResourceLimitError,"MemoryAllocationFailed");
     }
+/*#ifdef GEM5
+  (void) printf("EdgeImage\n");
+  m5_work_begin(0);
+#endif*/
   for (i=0; i < (ssize_t) (kernel_info->width*kernel_info->height); i++)
     kernel_info->values[i]=(-1.0);
   kernel_info->values[i/2]=(double) kernel_info->width*kernel_info->height-1.0;
@@ -1311,6 +1321,10 @@ MagickExport Image *EdgeImage(const Image *image,const double radius,
     edge_image=MorphologyApply(image,DefaultChannels,ConvolveMorphology,1,
       kernel_info,UndefinedCompositeOp,0.0,exception);
   kernel_info=DestroyKernelInfo(kernel_info);
+/*#ifdef GEM5
+  (void) printf("END EdgeImage\n");
+  m5_work_end(1);
+#endif*/ 
   return(edge_image);
 }
 
@@ -1415,6 +1429,10 @@ MagickExport Image *EmbossImage(const Image *image,const double radius,
 #if defined(SPEC)
   if (normalize < 0.0) normalize = 0.0;
 #endif
+/*#ifdef GEM5
+  (void) printf("EmbossImage\n");
+  m5_work_begin(0);
+#endif*/
   gamma=PerceptibleReciprocal(normalize);
   for (i=0; i < (ssize_t) (kernel_info->width*kernel_info->height); i++)
     kernel_info->values[i]*=gamma;
@@ -1426,6 +1444,10 @@ MagickExport Image *EmbossImage(const Image *image,const double radius,
   if (emboss_image != (Image *) NULL)
     (void) EqualizeImageChannel(emboss_image,(ChannelType)
       (AllChannels &~ SyncChannels));
+/*#ifdef GEM5
+  (void) printf("END EmbossImage\n");
+  m5_work_end(1);
+#endif*/
   return(emboss_image);
 }
 
diff --git a/benchspec/CPU/538.imagick_r/src/magick/feature.c b/benchspec/CPU/538.imagick_r/src/magick/feature.c
index 92f5ac5c..07e7f886 100644
--- a/benchspec/CPU/538.imagick_r/src/magick/feature.c
+++ b/benchspec/CPU/538.imagick_r/src/magick/feature.c
@@ -93,6 +93,16 @@
 #include "magick/token.h"
 #include "magick/utility.h"
 #include "magick/version.h"
+
+#ifdef GEM5
+#include "m5ops.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#include "m5_mmap.h"
+#endif
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -2152,8 +2162,25 @@ MagickExport Image *MeanShiftImage(const Image *image,const size_t width,
   #pragma omp parallel for schedule(static,4) shared(status,progress) \
     magick_threads(mean_image,mean_image,mean_image->rows,1)
 #endif
+#ifdef GEM5
+  (void) printf("MeanShiftImage\n");
+  unsigned int loop_count=0;
+  map_m5_mem();
+#endif
+#ifdef SPECCAST
+	initialize_barrier();
+#endif
+
   for (y=0; y < (ssize_t) mean_image->rows; y++)
   {
+#ifdef SPECCAST
+		call_barrier();
+#endif
+#ifdef GEM5
+    loop_count++;
+    printf("BEGIN ITERATION %d\n", loop_count);
+    m5_work_begin(0);
+#endif
     register const IndexPacket
       *restrict indexes;
 
@@ -2293,5 +2320,9 @@ MagickExport Image *MeanShiftImage(const Image *image,const size_t width,
   mean_view=DestroyCacheView(mean_view);
   pixel_view=DestroyCacheView(pixel_view);
   image_view=DestroyCacheView(image_view);
+#ifdef GEM5
+  (void) printf("END MeanShiftImage\n");
+  m5_work_end(1);
+#endif
   return(mean_image);
 }
diff --git a/benchspec/CPU/538.imagick_r/src/magick/m5_mmap.c b/benchspec/CPU/538.imagick_r/src/magick/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/magick/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/538.imagick_r/src/magick/m5_mmap.h b/benchspec/CPU/538.imagick_r/src/magick/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/magick/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/538.imagick_r/src/magick/m5op_flags.h b/benchspec/CPU/538.imagick_r/src/magick/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/magick/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/538.imagick_r/src/magick/m5op_x86.S b/benchspec/CPU/538.imagick_r/src/magick/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/magick/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/538.imagick_r/src/magick/m5ops.h b/benchspec/CPU/538.imagick_r/src/magick/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/538.imagick_r/src/magick/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/538.imagick_r/src/wand/mogrify.c b/benchspec/CPU/538.imagick_r/src/wand/mogrify.c
index 43322505..5f4e6a5b 100644
--- a/benchspec/CPU/538.imagick_r/src/wand/mogrify.c
+++ b/benchspec/CPU/538.imagick_r/src/wand/mogrify.c
@@ -55,6 +55,9 @@
 #include "magick/thread-private.h"
 #include "magick/string-private.h"
 #include "magick/utility-private.h"
+/*#ifdef GEM5
+#include "m5_mmap.h"
+#endif*/
 
 /*
   Define declarations.
@@ -713,6 +716,10 @@ WandExport MagickBooleanType MogrifyImage(ImageInfo *image_info,const int argc,
   /*
     Transmogrify the image.
   */
+/*#ifdef GEM5
+  (void) printf("\BEGIN ROI\n");
+  map_m5_mem();
+#endif*/
   for (i=0; i < (ssize_t) argc; i++)
   {
     Image
diff --git a/benchspec/CPU/541.leela_r/Spec/object.pm b/benchspec/CPU/541.leela_r/Spec/object.pm
index 01943cbe..977494de 100644
--- a/benchspec/CPU/541.leela_r/Spec/object.pm
+++ b/benchspec/CPU/541.leela_r/Spec/object.pm
@@ -30,6 +30,9 @@ $benchlang = 'CXX';
     Random.cpp
     SMP.cpp
     UCTNode.cpp
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
     ));
 
 $bench_flags = '-I. -DSPEC_AUTO_SUPPRESS_OPENMP';
diff --git a/benchspec/CPU/541.leela_r/src/Leela.cpp b/benchspec/CPU/541.leela_r/src/Leela.cpp
index 5d8d1f2e..0cc2e9df 100644
--- a/benchspec/CPU/541.leela_r/src/Leela.cpp
+++ b/benchspec/CPU/541.leela_r/src/Leela.cpp
@@ -15,6 +15,20 @@
 #include "SGFTree.h"
 #include "UCTSearch.h"
 
+#ifdef SPECCAST
+extern "C" {
+#include "barrier_cast.h"
+}
+#endif
+#ifdef GEM5
+extern "C" {
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+}
+#endif
+
 using namespace Utils;
 
 int main (int argc, char *argv[]) {        
@@ -58,15 +72,33 @@ int main (int argc, char *argv[]) {
 
             sgftree->load_from_file(filename, counter++);                
             *maingame = sgftree->get_mainline();
-
+#ifdef SPECCAST
+            initialize_barrier();
+#endif
+#if defined(GEM5)
+            unsigned int loop_count=0;
+	    map_m5_mem();
+#endif
 	    int move;
             do {
-                std::auto_ptr<UCTSearch> search(new UCTSearch(*maingame));
+#ifdef SPECCAST
+                call_barrier();
+#endif
+#if defined(GEM5)
+                loop_count++;
+                printf("BEGIN ITERATION %d\n", loop_count);
+		m5_work_begin(0);
+#endif
+		std::auto_ptr<UCTSearch> search(new UCTSearch(*maingame));
 
                 move = search->think(maingame->get_to_move(), UCTSearch::NORMAL);
 
                 maingame->play_move(move);  
-                maingame->display_state();                              
+                //maingame->display_state();
+#if defined(GEM5)
+                printf("END ITERATION %d\n", loop_count);
+		m5_work_end(1);
+#endif		                              
             } while (maingame->get_passes() < 2 && move != FastBoard::RESIGN);
         }
     } catch (std::exception & e) {
diff --git a/benchspec/CPU/541.leela_r/src/barrier_cast.c b/benchspec/CPU/541.leela_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/541.leela_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/541.leela_r/src/barrier_cast.h b/benchspec/CPU/541.leela_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/541.leela_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/541.leela_r/src/m5_mmap.c b/benchspec/CPU/541.leela_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/541.leela_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/541.leela_r/src/m5_mmap.h b/benchspec/CPU/541.leela_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/541.leela_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/541.leela_r/src/m5op_flags.h b/benchspec/CPU/541.leela_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/541.leela_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/541.leela_r/src/m5op_x86.S b/benchspec/CPU/541.leela_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/541.leela_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/541.leela_r/src/m5ops.h b/benchspec/CPU/541.leela_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/541.leela_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/544.nab_r/Spec/object.pm b/benchspec/CPU/544.nab_r/Spec/object.pm
index c594d9fb..808d4202 100644
--- a/benchspec/CPU/544.nab_r/Spec/object.pm
+++ b/benchspec/CPU/544.nab_r/Spec/object.pm
@@ -23,6 +23,9 @@ $skipreltol = 2;
     database.c
     traceback.c
     chirvol.c
+    barrier_cast.c
+    m5_mmap.c
+    m5op_x86.S
     specrand/specrand.c
     regex-alpha/regcomp.c
     regex-alpha/regerror.c
diff --git a/benchspec/CPU/544.nab_r/src/barrier_cast.c b/benchspec/CPU/544.nab_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/544.nab_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/544.nab_r/src/barrier_cast.h b/benchspec/CPU/544.nab_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/544.nab_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/544.nab_r/src/m5_mmap.c b/benchspec/CPU/544.nab_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/544.nab_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/544.nab_r/src/m5_mmap.h b/benchspec/CPU/544.nab_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/544.nab_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/544.nab_r/src/m5op_flags.h b/benchspec/CPU/544.nab_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/544.nab_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/544.nab_r/src/m5op_x86.S b/benchspec/CPU/544.nab_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/544.nab_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/544.nab_r/src/m5ops.h b/benchspec/CPU/544.nab_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/544.nab_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/544.nab_r/src/sff.c b/benchspec/CPU/544.nab_r/src/sff.c
index 51dd639e..3346dc27 100644
--- a/benchspec/CPU/544.nab_r/src/sff.c
+++ b/benchspec/CPU/544.nab_r/src/sff.c
@@ -48,6 +48,16 @@
 #include "mpi.h"
 #endif
 
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
 static int max_step = -1; /* Used in mme34 */
 
 INT_T nblist(INT_T * lpears, INT_T * upears, INT_T ** pearlist, REAL_T * x,
@@ -1755,9 +1765,22 @@ int md(int n, int maxstep, REAL_T * x, REAL_T * f, REAL_T * v,
    }
 
    max_step = maxstep; /* For printing last step from mme34() */
-
+#ifdef SPECCAST
+   initialize_barrier();
+#endif   
+#if defined(GEM5)
+   unsigned int loop_count=0;
+   map_m5_mem();
+#endif
    for (nstep = 1; nstep <= maxstep; nstep++) {
-
+#ifdef SPECCAST
+      call_barrier();
+#endif      
+#if defined(GEM5)
+      loop_count++;
+      printf("BEGIN ITERATION %d\n", loop_count);
+      m5_work_begin(0);
+#endif     
       if (ekin > 0.01)
          tscal = sqrt(1. + dttp * (ekin0 / ekin - 1.));
       else
@@ -1870,6 +1893,10 @@ int md(int n, int maxstep, REAL_T * x, REAL_T * f, REAL_T * v,
 #endif
       if (ntwx > 0 && nstep % ntwx == 0 && binposfp != NULL)
          writebinposfrm(n / 3, x, binposfp);
+#if defined(GEM5)
+      printf("END ITERATION %d\n", loop_count);
+      m5_work_end(1);
+#endif   
    }
 
    /* Free the static gradient vector from within func. */
diff --git a/benchspec/CPU/548.exchange2_r/Spec/object.pm b/benchspec/CPU/548.exchange2_r/Spec/object.pm
index 68c569e3..1288bc41 100644
--- a/benchspec/CPU/548.exchange2_r/Spec/object.pm
+++ b/benchspec/CPU/548.exchange2_r/Spec/object.pm
@@ -11,7 +11,7 @@ $benchlang = 'F';
 $bench_flags = '-DSPEC_AUTO_SUPPRESS_OPENMP';
 
 @sources = (qw (
-    exchange2.F90
+    exchange2.F90 m5_mmap.c m5op_x86.S barrier_cast.c
     ));
 
 sub invoke {
diff --git a/benchspec/CPU/548.exchange2_r/src/barrier_cast.c b/benchspec/CPU/548.exchange2_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/548.exchange2_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/548.exchange2_r/src/barrier_cast.h b/benchspec/CPU/548.exchange2_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/548.exchange2_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/548.exchange2_r/src/exchange2.F90 b/benchspec/CPU/548.exchange2_r/src/exchange2.F90
index 92e2dd07..94da647c 100644
--- a/benchspec/CPU/548.exchange2_r/src/exchange2.F90
+++ b/benchspec/CPU/548.exchange2_r/src/exchange2.F90
@@ -1381,10 +1381,36 @@ all:  do i = 1, 3
 
   program test_work
   use brute_force
+
      implicit none
+#ifdef SPECAST
+     interface
+       subroutine initialize_barrier() bind(C)
+       end subroutine initialize_barrier
+       subroutine call_barrier() bind(C)
+       end subroutine call_barrier
+     end interface
+#endif       
+#ifdef GEM5
+     interface
+       subroutine m5_map_mem() bind(C)
+       end subroutine m5_map_mem
+       subroutine m5_work_begin(val) bind(C)
+         use iso_c_binding, only: c_int
+         integer(c_int), value :: val
+       end subroutine m5_work_begin
+       subroutine m5_work_end(val2) bind(C)
+         use iso_c_binding, only: c_int
+	 integer(c_int), value :: val2
+       end subroutine m5_work_end
+     end interface
+#endif
       integer :: sudoku1(9,9), i, j, l, m, ss(9,9) , val ,k, knt, original(9, 9), rn(9, 4), &
                  ii, jj, kk, so(9, 9), sp(9, 9), rv(9, 9, 9), last(4), sfull(9, 9)
      integer :: i2, ii2, j2, jj2, kk2, val2, stemp, limit = 1, se = 0, mode, nargs
+#ifdef GEM5
+      integer :: loop_count = 0      
+#endif 
       real t1, t2
       integer :: number
       logical :: random = .true., new, change, done(81, 81), same1, same2, grind = .false., &
@@ -1412,8 +1438,16 @@ all:  do i = 1, 3
       call cpu_time(t1)           
 #endif         
      if(grind) open(3, file='s.txt')
-      
+
+#ifdef SPECCAST
+       call initialize_barrier()
+#endif 
+#ifdef GEM5
+      call map_m5_mem()
+#endif 
+     
 fine: do k = 1, limit
+
      write(*, '(/"Puzzle ",i0)') k
       call read_raw_data(sudoku1, k)  
       write(*, '(9i3)') ((sudoku1(i, j), j=1,9), i=1,9)  
@@ -1422,6 +1456,7 @@ fine: do k = 1, limit
   new = .true.
   last = 0
   do
+
      change = new .or. grind
      if(new) then
         do i = 1, 4
@@ -1455,6 +1490,14 @@ fine: do k = 1, limit
       done = .false.
       knt = count(ss /= 0)
 fin: do ii = 1, 9
+#ifdef SPECCAST
+     call call_barrier()
+#endif
+#ifdef GEM5
+     loop_count = loop_count+1
+     write(*, '(/"BEGIN ITERATION ",i0)') loop_count
+     call m5_work_begin(0)
+#endif  
          i = rn(ii, 1) 
          do jj = 1, 9  
              j = rn(jj, 2)  
@@ -1560,6 +1603,10 @@ h:             do kk = 1, 9
 
            end do h
          end do 
+#ifdef GEM5
+      write(*, '(/"END ITERATION ",i0)') loop_count
+      call m5_work_end(1)
+#endif
       end do fin
       
      if(all(so == sudoku1)) exit
@@ -1576,6 +1623,8 @@ write(*, '(/," Puzzle, count, changes: ", 3i3)') k, knt, count(original /= sudok
 #ifndef SPEC
 write(*, '(a, f10.2)') ' Elapsed time: ', t2-t1
 #endif
+
+ 
 end do fine
 
 #ifndef SPEC
diff --git a/benchspec/CPU/548.exchange2_r/src/m5_mmap.c b/benchspec/CPU/548.exchange2_r/src/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/548.exchange2_r/src/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/548.exchange2_r/src/m5_mmap.h b/benchspec/CPU/548.exchange2_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/548.exchange2_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/548.exchange2_r/src/m5op_flags.h b/benchspec/CPU/548.exchange2_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/548.exchange2_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/548.exchange2_r/src/m5op_x86.S b/benchspec/CPU/548.exchange2_r/src/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/548.exchange2_r/src/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/548.exchange2_r/src/m5ops.h b/benchspec/CPU/548.exchange2_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/548.exchange2_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/549.fotonik3d_r/Spec/object.pm b/benchspec/CPU/549.fotonik3d_r/Spec/object.pm
index f2846915..58cd7e4e 100644
--- a/benchspec/CPU/549.fotonik3d_r/Spec/object.pm
+++ b/benchspec/CPU/549.fotonik3d_r/Spec/object.pm
@@ -31,6 +31,9 @@ $bench_flags='-I. -DSPEC_AUTO_SUPPRESS_OPENMP';
     yeemain.F90
     writeout.F90
     MPI_dummy.F90
+    m5_mmap.c
+    m5op_x86.S
+    barrier_cast.c
     ));
 
 sub generate_inputs {
diff --git a/benchspec/CPU/549.fotonik3d_r/src/barrier_cast.c b/benchspec/CPU/549.fotonik3d_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/549.fotonik3d_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/549.fotonik3d_r/src/barrier_cast.h b/benchspec/CPU/549.fotonik3d_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/549.fotonik3d_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/549.fotonik3d_r/src/leapfrog.F90 b/benchspec/CPU/549.fotonik3d_r/src/leapfrog.F90
index 5e2b7e79..9f26b3ca 100644
--- a/benchspec/CPU/549.fotonik3d_r/src/leapfrog.F90
+++ b/benchspec/CPU/549.fotonik3d_r/src/leapfrog.F90
@@ -54,6 +54,29 @@ USE UPML_mod, ONLY :  UPML_updateE, UPML_updateH
 
 IMPLICIT NONE
 
+#if defined(SPECAST)
+     interface
+       subroutine initialize_barrier() bind(C)
+       end subroutine initialize_barrier
+       subroutine call_barrier() bind(C)
+       end subroutine call_barrier
+     end interface
+#endif
+#if defined(GEM5)
+     interface
+       subroutine m5_map_mem() bind(C)
+       end subroutine m5_map_mem
+       subroutine m5_work_begin(val) bind(C)
+         use iso_c_binding, only: c_int
+         integer(c_int), value :: val
+       end subroutine m5_work_begin
+       subroutine m5_work_end(val2) bind(C)
+         use iso_c_binding, only: c_int
+	 integer(c_int), value :: val2
+       end subroutine m5_work_end
+     end interface
+#endif
+
 !------------------------------------------------------------------------------
 !                     A r g u m e n t s             
 !------------------------------------------------------------------------------
@@ -94,6 +117,10 @@ integer :: nx_min, nx_max, nx_psource_local, nx_psource_global
 integer :: ny_min, ny_max, ny_psource_local, ny_psource_global
 integer :: nz_min, nz_max, nz_psource_local, nz_psource_global
 
+#if defined(GEM5)
+integer :: loop_count=0
+#endif
+
 ! Field record variables
 real(kind=rfp), allocatable, dimension(:,:) :: HzT ! Point probe Hz
 
@@ -133,8 +160,22 @@ tid1 = 0
 tid2 = 0
 #endif
 
-do ts = 1,nts            
+#if defined(SPECCAST)
+       call initialize_barrier()
+#endif 
+#if defined(GEM5)
+call map_m5_mem()
+#endif
 
+do ts = 1,nts           
+#if defined(SPECCAST)
+  call call_barrier()
+#endif 
+#if defined(GEM5)
+  loop_count = loop_count+1
+  write(*,*) 'BEGIN ITERATION ', loop_count
+  call m5_work_begin(0)
+#endif
   if ((ts==1).and.(my_id==master_id)) then
     write(*,*) '-----------------------------------------------------'
     write(*,*) '(Master) Entering main loop'
@@ -350,7 +391,10 @@ do ts = 1,nts
       ipower = ipower + 1
     end do
   end if
-
+#if defined(GEM5)
+  write(*,*) 'END ITERATION ', loop_count
+  call m5_work_end(1)
+#endif
 end do
 
 if (my_id==master_id) then
diff --git a/benchspec/CPU/549.fotonik3d_r/src/m5_mmap.c b/benchspec/CPU/549.fotonik3d_r/src/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/549.fotonik3d_r/src/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/549.fotonik3d_r/src/m5_mmap.h b/benchspec/CPU/549.fotonik3d_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/549.fotonik3d_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/549.fotonik3d_r/src/m5op_flags.h b/benchspec/CPU/549.fotonik3d_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/549.fotonik3d_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/549.fotonik3d_r/src/m5op_x86.S b/benchspec/CPU/549.fotonik3d_r/src/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/549.fotonik3d_r/src/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/549.fotonik3d_r/src/m5ops.h b/benchspec/CPU/549.fotonik3d_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/549.fotonik3d_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/554.roms_r/Spec/object.pm b/benchspec/CPU/554.roms_r/Spec/object.pm
index 8f601300..fbf41422 100644
--- a/benchspec/CPU/554.roms_r/Spec/object.pm
+++ b/benchspec/CPU/554.roms_r/Spec/object.pm
@@ -246,6 +246,9 @@ $abstol = 1.0e-7;
     mod_nesting.F90
     esmf_roms.F90
     master.F90
+    m5_mmap.c
+    m5op_x86.S
+    barrier_cast.c
     ));
 
 sub invoke {
diff --git a/benchspec/CPU/554.roms_r/src/barrier_cast.c b/benchspec/CPU/554.roms_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/554.roms_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/554.roms_r/src/barrier_cast.h b/benchspec/CPU/554.roms_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/554.roms_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/554.roms_r/src/m5_mmap.c b/benchspec/CPU/554.roms_r/src/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/benchspec/CPU/554.roms_r/src/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/554.roms_r/src/m5_mmap.h b/benchspec/CPU/554.roms_r/src/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/benchspec/CPU/554.roms_r/src/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/benchspec/CPU/554.roms_r/src/m5op_flags.h b/benchspec/CPU/554.roms_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/554.roms_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/554.roms_r/src/m5op_x86.S b/benchspec/CPU/554.roms_r/src/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/benchspec/CPU/554.roms_r/src/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/554.roms_r/src/m5ops.h b/benchspec/CPU/554.roms_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/554.roms_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/554.roms_r/src/nl_ocean.h b/benchspec/CPU/554.roms_r/src/nl_ocean.h
index 8380776c..bcb08ffc 100644
--- a/benchspec/CPU/554.roms_r/src/nl_ocean.h
+++ b/benchspec/CPU/554.roms_r/src/nl_ocean.h
@@ -230,10 +230,23 @@
 !  Run model for all nested grids, if any.
 !-----------------------------------------------------------------------
 !
+#ifdef SPECCAST
+          call initialize_barrier()
+#endif
+#ifdef GEM5
+          call map_m5_mem()
+#endif
       NEST_LOOP : DO ng=1,Ngrids
 
         NL_LOOP : DO my_iic=Tstr(ng),Tend(ng)
-
+#ifdef SPECCAST
+          call call_barrier()
+#endif
+#ifdef GEM5        
+          WRITE (stdout,200) 
+ 200      FORMAT ('BEGIN ITERATION ',/)
+          call m5_work_begin(0)
+#endif
           iic(ng)=my_iic
 #ifdef SOLVE3D
           CALL main3d (ng)
@@ -241,7 +254,11 @@
           CALL main2d (ng)
 #endif
           IF (exit_flag.ne.NoError) RETURN
-
+#ifdef GEM5
+          WRITE (stdout,300)
+ 300      FORMAT ('END ITERATION',/)
+          call m5_work_end(1)
+#endif
         END DO NL_LOOP
 
       END DO NEST_LOOP
diff --git a/benchspec/CPU/557.xz_r/Spec/object.pm b/benchspec/CPU/557.xz_r/Spec/object.pm
index 20b15fc5..ce09f948 100644
--- a/benchspec/CPU/557.xz_r/Spec/object.pm
+++ b/benchspec/CPU/557.xz_r/Spec/object.pm
@@ -28,6 +28,9 @@ $bench_flags .= ' '.join(' ', qw(
     spec.c
     spec_xz.c
     pxz.c
+    m5_mmap.c
+    m5op_x86.S
+    barrier_cast.c
     common/tuklib_physmem.c
     liblzma/common/common.c
     liblzma/common/block_util.c
diff --git a/benchspec/CPU/557.xz_r/src/barrier_cast.c b/benchspec/CPU/557.xz_r/src/barrier_cast.c
new file mode 100644
index 00000000..7cf5446f
--- /dev/null
+++ b/benchspec/CPU/557.xz_r/src/barrier_cast.c
@@ -0,0 +1,53 @@
+#include "barrier_cast.h"
+
+int initialize_barrier()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+int initialize_barrier_()
+{
+    char    shm_name[] = "tmp_pthread_barrierattr_getpshared";
+    int     shm_fd;
+    shm_fd = shm_open(shm_name, O_RDWR, 0644);
+    if(shm_fd == -1)
+    {
+      fprintf(stderr,"[E] Error at shm_open()");
+      exit(-2);
+    }
+    my_barrier = (spec_barrier_t*)mmap(NULL, sizeof(spec_barrier_t), PROT_READ|PROT_WRITE,
+      MAP_SHARED, shm_fd, (off_t)0);
+    if(my_barrier == MAP_FAILED)
+    {
+      fprintf(stderr,"[E] child: Error at first mmap()");
+      exit(-1);
+    }
+    return 0;
+}
+
+void call_barrier()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
+
+void call_barrier_()
+{
+  if(my_barrier->doWait)
+  {  pthread_barrier_wait(&my_barrier->barrier);}
+}
\ No newline at end of file
diff --git a/benchspec/CPU/557.xz_r/src/barrier_cast.h b/benchspec/CPU/557.xz_r/src/barrier_cast.h
new file mode 100644
index 00000000..fc700d05
--- /dev/null
+++ b/benchspec/CPU/557.xz_r/src/barrier_cast.h
@@ -0,0 +1,21 @@
+#include <pthread.h>
+#include <sys/mman.h>
+#include <stdbool.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct spec_barrier {
+   pthread_barrier_t barrier;
+   bool doWait;;
+} spec_barrier_t;
+
+static spec_barrier_t* my_barrier;
+
+int initialize_barrier();
+
+int initialize_barrier_();
+
+void call_barrier();
+
+void call_barrier_();
\ No newline at end of file
diff --git a/benchspec/CPU/557.xz_r/src/m5_mmap.c b/benchspec/CPU/557.xz_r/src/m5_mmap.c
new file mode 100644
index 00000000..dfb6b450
--- /dev/null
+++ b/benchspec/CPU/557.xz_r/src/m5_mmap.c
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/benchspec/CPU/557.xz_r/src/m5_mmap.h b/benchspec/CPU/557.xz_r/src/m5_mmap.h
new file mode 100644
index 00000000..077704d2
--- /dev/null
+++ b/benchspec/CPU/557.xz_r/src/m5_mmap.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+
+#endif
diff --git a/benchspec/CPU/557.xz_r/src/m5op_flags.h b/benchspec/CPU/557.xz_r/src/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/benchspec/CPU/557.xz_r/src/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/benchspec/CPU/557.xz_r/src/m5op_x86.S b/benchspec/CPU/557.xz_r/src/m5op_x86.S
new file mode 100644
index 00000000..8db36fc0
--- /dev/null
+++ b/benchspec/CPU/557.xz_r/src/m5op_x86.S
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
diff --git a/benchspec/CPU/557.xz_r/src/m5ops.h b/benchspec/CPU/557.xz_r/src/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/benchspec/CPU/557.xz_r/src/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
diff --git a/benchspec/CPU/557.xz_r/src/spec_xz.c b/benchspec/CPU/557.xz_r/src/spec_xz.c
index 148ce9d3..2dcbe945 100644
--- a/benchspec/CPU/557.xz_r/src/spec_xz.c
+++ b/benchspec/CPU/557.xz_r/src/spec_xz.c
@@ -21,6 +21,16 @@ typedef unsigned char _Bool;
 #include "spec_mem_io.h"
 #include "lzma.h"
 
+#ifdef SPECCAST
+#include "barrier_cast.h"
+#endif
+#ifdef GEM5
+#include "m5ops.h"
+#include "m5_mmap.h"
+int m5_work_begin(int num);
+int m5_work_end(int num);
+#endif
+
 static bool init_decoder(lzma_stream *strm);
 bool init_encoder(lzma_stream *strm, lzma_options_lzma *options, uint32_t preset, lzma_check check);
 
@@ -226,8 +236,31 @@ void compressStream ( int stream, int zStream, uint32_t preset ) {
     strm.avail_in = 0;
     strm.next_out = out;
     strm.avail_out = sizeof(out);
+#if defined(SPECCAST) || defined(GEM5)
+    unsigned int loop_count=0;
+#endif
+#ifdef SPECCAST
+    initialize_barrier();
+#endif   
+#ifdef GEM5
+    map_m5_mem();
+#endif
     while(true) {
-        if (strm.avail_in == 0 && !feof(stream)) {
+#if defined(SPECCAST) || defined(GEM5)
+        loop_count++;
+        if (loop_count%1000==0) {
+#endif
+#ifdef SPECCAST
+            call_barrier();
+#endif   
+#ifdef GEM5
+    	    printf("BEGIN ITERATION %d\n", loop_count);
+	        m5_work_begin(0);
+#endif
+#if defined(SPECCAST) || defined(GEM5)
+        }
+#endif
+	if (strm.avail_in == 0 && !feof(stream)) {
             strm.next_in = in;
             strm.avail_in = fread(in, 1, sizeof(in), stream);
 
@@ -271,6 +304,12 @@ void compressStream ( int stream, int zStream, uint32_t preset ) {
             printf("Compression encoder error: %s (code %u)\n", msg, rc);
             return;
         }
+#ifdef GEM5
+        if (loop_count%1000==0) {
+	    printf("END ITERATION %d\n", loop_count);
+	    m5_work_end(1);
+	}
+#endif
     }
 
     // Free up memory
diff --git a/benchspec/Makefile.defaults b/benchspec/Makefile.defaults
index 426b00de..72d2433f 100644
--- a/benchspec/Makefile.defaults
+++ b/benchspec/Makefile.defaults
@@ -85,6 +85,9 @@ OPTIMIZATION_FLIBS=
 EXTRA_FPPFLAGS=
 FPPPORTABILITY=
 FPPFLAGS=
+# Uncomment the lines corresponding to gem5 or spec_cast as needed.
+#FPPFLAGS+= -DGEM5
+#FPPFLAGS+= -DSPECCAST
 BENCH_FPPFLAGS=
 
 ifeq (PASS,$(findstring PASS,$(FDO)))
@@ -202,7 +205,7 @@ CXXOBJOPT ?= $(OBJOPT)
 ifneq ($(origin FC), file)
 FC         = f90
 endif
-FOBJOPT   ?= $(OBJOPT)
+FOBJOPT   ?= $(OBJOPT) -cpp
 
 # Here's the part that adds -lm (for non-Windows systems) to the link command,
 # but it only does it if the primary language of the benchmark is _NOT_ C++.
@@ -283,10 +286,21 @@ FINAL_CFLAGS   += $(OPTIMIZE) $(COPTIMIZE)   $(FDO_OPTIMIZE) $(FDO_COPTIMIZE)
 FINAL_CXXFLAGS += $(OPTIMIZE) $(CXXOPTIMIZE) $(FDO_OPTIMIZE) $(FDO_CXXOPTIMIZE) $(PORTABILITY) $(CXXPORTABILITY)
 RAW_FFLAGS     += $(OPTIMIZE) $(FOPTIMIZE)   $(FDO_OPTIMIZE) $(FDO_FOPTIMIZE)   $(PORTABILITY) $(FPORTABILITY)
 
-# Now add all of the "extra" flags on the end.
-FINAL_CFLAGS   += $(EXTRA_CFLAGS)
-FINAL_CXXFLAGS += $(EXTRA_CXXFLAGS)
-RAW_FFLAGS     += $(EXTRA_FFLAGS)
+# Now add all of the "extra" flags on the end. including all the required to run on gem5 or spec_cast
+# Uncomment the lines corresponding to gem5 or spec_cast as needed (D_GNU_SOURCE is needed for both).
+FINAL_CFLAGS   += $(EXTRA_CFLAGS) -D_GNU_SOURCE 
+FINAL_CXXFLAGS += $(EXTRA_CXXFLAGS) 
+RAW_FFLAGS     += $(EXTRA_FFLAGS) 
+
+#GEM5 flags
+#FINAL_CFLAGS   += -DGEM5 -DM5OP_ADDR=0xFFFF0000 -DM5OP_PIC
+#FINAL_CXXFLAGS += -DGEM5 -DM5OP_ADDR=0xFFFF0000 -DM5OP_PIC
+#RAW_FFLAGS     += -DGEM5 -DM5OP_ADDR=0xFFFF0000 -DM5OP_PIC
+
+#SPEC_cast flags 
+#FINAL_CFLAGS   += -DSPECCAST -fPIC 
+#FINAL_CXXFLAGS += -DSPECCAST 
+#RAW_FFLAGS     += -DSPECCAST 
 
 # And then the "extra" optimization and portability flags
 FINAL_CFLAGS   += $(EXTRA_OPTIMIZE) $(EXTRA_COPTIMIZE)   $(EXTRA_PORTABILITY) $(EXTRA_CPORTABILITY)
@@ -296,7 +310,7 @@ RAW_FFLAGS     += $(EXTRA_OPTIMIZE) $(EXTRA_FOPTIMIZE)   $(EXTRA_PORTABILITY) $(
 # Filter out defines and undefines from Fortran flags
 FINAL_FFLAGS = $(filter-out $(_defines_filter), $(RAW_FFLAGS))
 
-FINAL_LIBS     =$(LIBS) $(OS_LIBS) $(MATH_LIBS) $(OPTIMIZATION_LIBS) $(OPTIMIZATION_$(PRIMARY_BENCHLANG)LIBS) $(PORTABILITY_LIBS) $(PORTABILITY_$(PRIMARY_BENCHLANG)LIBS) $(EXTRA_LIBS) $(EXTRA_$(PRIMARY_BENCHLANG)LIBS)
+FINAL_LIBS     =$(LIBS) $(OS_LIBS) $(MATH_LIBS) $(OPTIMIZATION_LIBS) $(OPTIMIZATION_$(PRIMARY_BENCHLANG)LIBS) $(PORTABILITY_LIBS) $(PORTABILITY_$(PRIMARY_BENCHLANG)LIBS) $(EXTRA_LIBS) $(EXTRA_$(PRIMARY_BENCHLANG)LIBS) -pthread -lrt
 
 ###############
 # specpp flags; order is expected to conform to RAW_FFLAGS ordering
@@ -351,6 +365,15 @@ endif
 %.i: %.c
 	$(CC) $(PPCFLAGS) $(FINAL_CFLAGS) $< > $@
 
+# S
+%$(OBJ): %.S
+	$(CC) $(COBJOPT) $(FINAL_CFLAGS) $<
+ifdef NEEDATFILE
+	$(file >>$(OBJNAMES),$@)
+endif
+%.i: %.S
+	$(CC) $(PPCFLAGS) $(FINAL_CFLAGS) $< > $@
+
 # C++
 %$(OBJ): %.cc
 	$(CXXC) $(CXXOBJOPT) $(FINAL_CXXFLAGS) $<
diff --git a/bin/common/setup_common.pl b/bin/common/setup_common.pl
index fefee67c..f0473ae6 100644
--- a/bin/common/setup_common.pl
+++ b/bin/common/setup_common.pl
@@ -217,7 +217,7 @@ sub check_important_files {
 
     # CVT2DEV: $::check_integrity = 0; return;
     return if (::is_devel($::suite_version) and $ENV{'SPEC_NOCHECK'});
-    $::check_integrity = 1;
+    #$::check_integrity = 1;
     # Who I Am is actually the last three components of the path, which should be
     # 'bin' / (harness|formatter) / <me>
     my $whoami;
diff --git a/config/abadp-gcc-linux-x86.cfg b/config/abadp-gcc-linux-x86.cfg
new file mode 100644
index 00000000..81ce1f46
--- /dev/null
+++ b/config/abadp-gcc-linux-x86.cfg
@@ -0,0 +1,995 @@
+#------------------------------------------------------------------------------
+# SPEC CPU2017 config file for: gcc / g++ / gfortran on Linux x86
+#------------------------------------------------------------------------------
+# 
+# Usage: (1) Copy this to a new name
+#             cd $SPEC/config
+#             cp Example-x.cfg myname.cfg
+#        (2) Change items that are marked 'EDIT' (search for it)
+# 
+# SPEC tested this config file with:
+#    Compiler version(s):    4.4.7, 4.9.2, 5.2.0, 6.3.0
+#    Operating system(s):    Oracle Linux Server 6.5 and 7.2 / 
+#                            Red Hat Enterprise Linux Server 6.5 and 7.2
+#    Hardware:               Xeon 
+#
+# If your system differs, this config file might not work.
+# You might find a better config file at http://www.spec.org/cpu2017/results
+#
+# Known Limitations with GCC 4 
+#
+#   (1) Possible problem: compile time messages
+#                             error: unrecognized command line option '...'
+#      Recommendation:    Use a newer version of the compiler.
+#                         If that is not possible, remove the unrecognized 
+#                         option from this config file.
+#
+#   (2) Possible problem: run time errors messages 
+#           527.cam4_r or 627.cam4_s    *** Miscompare of cam4_validate.txt    
+#      Recommendation: Use a newer version of the compiler.
+#                      If that is not possible, try reducing the optimization.
+#
+# Compiler issues: Contact your compiler vendor, not SPEC.
+# For SPEC help:   http://www.spec.org/cpu2017/Docs/techsupport.html
+#------------------------------------------------------------------------------
+
+
+#--------- Label --------------------------------------------------------------
+# Arbitrary string to tag binaries 
+#                  Two Suggestions: # (1) EDIT this label as you try new ideas.
+%define label gem5                # (2)      Use a label meaningful to *you*.
+
+
+#--------- Preprocessor -------------------------------------------------------
+%ifndef %{bits}                # EDIT to control 32 or 64 bit compilation.  Or, 
+%   define  bits        64     #      you can set it on the command line using:
+%endif                         #      'runcpu --define bits=nn'
+
+%ifndef %{build_ncpus}         # EDIT to adjust number of simultaneous compiles.
+%   define  build_ncpus 8      #      Or, you can set it on the command line: 
+%endif                         #      'runcpu --define build_ncpus=nn'
+
+# Don't change this part.
+%define    os           LINUX
+%if %{bits} == 64
+%   define model        -m64
+%elif %{bits} == 32
+%   define model        -m32
+%else
+%   error Please define number of bits - see instructions in config file
+%endif
+
+
+#--------- Global Settings ----------------------------------------------------
+# For info, see:
+#            https://www.spec.org/cpu2017/Docs/config.html#fieldname   
+#   Example: https://www.spec.org/cpu2017/Docs/config.html#tune        
+
+command_add_redirect = 1
+flagsurl             = $[top]/config/flags/gcc.xml
+ignore_errors        = 1
+iterations           = 1
+label                = %{label}-m%{bits}
+line_width           = 1020
+log_line_width       = 1020
+makeflags            = --jobs=%{build_ncpus} 
+mean_anyway          = 1
+output_format        = txt,html,cfg,pdf,csv
+preenv               = 1
+reportable           = 0
+tune                 = base
+
+
+#--------- How Many CPUs? -----------------------------------------------------
+# Both SPECrate and SPECspeed can test multiple chips / cores / hw threads
+#    - For SPECrate,  you set the number of copies.
+#    - For SPECspeed, you set the number of threads. 
+# See: https://www.spec.org/cpu2017/Docs/system-requirements.html#MultipleCPUs
+#
+#    q. How many should I set?  
+#    a. Unknown, you will have to try it and see!
+#
+# To get you started, some suggestions:
+#
+#     copies - This config file defaults to testing only 1 copy.   You might
+#              try changing it to match the number of cores on your system, 
+#              or perhaps the number of virtual CPUs as reported by:
+#                     grep -c processor /proc/cpuinfo
+#              Be sure you have enough memory.  See:
+#              https://www.spec.org/cpu2017/Docs/system-requirements.html#memory
+#
+#     threads - This config file sets a starting point.  You could try raising 
+#               it.  A higher thread count is much more likely to be useful for
+#               fpspeed than for intspeed.
+#
+intrate,fprate:
+   copies           = 1   # EDIT to change number of copies (see above)
+intspeed,fpspeed:
+   threads          = 4   # EDIT to change number of OpenMP threads (see above)
+
+
+#------- Compilers ------------------------------------------------------------
+default:
+#                    EDIT: the directory where your compiler is installed
+%ifndef %{gcc_dir}
+%   define  gcc_dir        /usr
+%endif
+
+# EDIT if needed: the preENV line adds library directories to the runtime
+#      path.  You can adjust it, or add lines for other environment variables. 
+#      See: https://www.spec.org/cpu2017/Docs/config.html#preenv
+#      and: https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html
+   preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64/:%{gcc_dir}/lib/:/lib64
+  #preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64/:%{gcc_dir}/lib/:/lib64:%{ENV_LD_LIBRARY_PATH}
+   SPECLANG                = %{gcc_dir}/bin/
+   CC                      = $(SPECLANG)gcc     -std=c99   %{model}
+   CXX                     = $(SPECLANG)g++                %{model}
+   FC                      = $(SPECLANG)gfortran           %{model}
+   # How to say "Show me your version, please"
+   CC_VERSION_OPTION       = -v
+   CXX_VERSION_OPTION      = -v
+   FC_VERSION_OPTION       = -v
+
+default:
+%if %{bits} == 64
+   sw_base_ptrsize = 64-bit
+   sw_peak_ptrsize = 64-bit
+%else
+   sw_base_ptrsize = 32-bit
+   sw_peak_ptrsize = 32-bit
+%endif
+
+
+#--------- Portability --------------------------------------------------------
+default:               # data model applies to all benchmarks
+%if %{bits} == 32
+    # Strongly recommended because at run-time, operations using modern file 
+    # systems may fail spectacularly and frequently (or, worse, quietly and 
+    # randomly) if a program does not accommodate 64-bit metadata.
+    EXTRA_PORTABILITY = -D_FILE_OFFSET_BITS=64
+%else
+    EXTRA_PORTABILITY = -DSPEC_LP64
+%endif
+
+# Benchmark-specific portability (ordered by last 2 digits of bmark number)
+
+500.perlbench_r,600.perlbench_s:  #lang='C'
+%if %{bits} == 32
+%   define suffix IA32
+%else
+%   define suffix X64
+%endif
+   PORTABILITY    = -DSPEC_%{os}_%{suffix}
+
+521.wrf_r,621.wrf_s:  #lang='F,C'
+   CPORTABILITY  = -DSPEC_CASE_FLAG 
+   FPORTABILITY  = -fconvert=big-endian
+
+523.xalancbmk_r,623.xalancbmk_s:  #lang='CXX'
+   PORTABILITY   = -DSPEC_%{os}
+
+526.blender_r:  #lang='CXX,C'
+   PORTABILITY   = -funsigned-char -DSPEC_LINUX
+
+527.cam4_r,627.cam4_s:  #lang='F,C'
+   PORTABILITY   = -DSPEC_CASE_FLAG
+
+628.pop2_s:  #lang='F,C'
+   CPORTABILITY    = -DSPEC_CASE_FLAG
+   FPORTABILITY    = -fconvert=big-endian
+
+
+#-------- Tuning Flags common to Base and Peak --------------------------------
+
+#
+# Speed (OpenMP and Autopar allowed)
+#
+%if %{bits} == 32
+   intspeed,fpspeed:
+   #
+   # Many of the speed benchmarks (6nn.benchmark_s) do not fit in 32 bits
+   # If you wish to run SPECint2017_speed or SPECfp2017_speed, please use
+   #
+   #     runcpu --define bits=64
+   #
+   fail_build = 1
+%else
+   intspeed,fpspeed:
+      EXTRA_OPTIMIZE = -fopenmp -DSPEC_OPENMP
+   fpspeed:
+      #
+      # 627.cam4 needs a big stack; the preENV will apply it to all 
+      # benchmarks in the set, as required by the rules.  
+      #
+      preENV_OMP_STACKSIZE = 120M
+%endif
+
+
+#--------  Baseline Tuning Flags ----------------------------------------------
+#
+# EDIT if needed -- Older GCC might not support some of the optimization
+#                   switches here.  See also 'About the -fno switches' below.
+#
+default=base:         # flags for all base 
+   OPTIMIZE       = -g -O3 -march=native -fno-unsafe-math-optimizations  -fno-tree-loop-vectorize
+
+intrate,intspeed=base: # flags for integer base
+%if %{bits} == 32                    
+    EXTRA_COPTIMIZE = -fgnu89-inline -fno-strict-aliasing 
+%else                                
+    EXTRA_COPTIMIZE = -fno-strict-aliasing 
+    LDCFLAGS        = -z muldefs     
+%endif                               
+# Notes about the above
+#  - 500.perlbench_r/600.perlbench_s needs -fno-strict-aliasing.
+#  - 502.gcc_r/602.gcc_s             needs -fgnu89-inline or -z muldefs
+#  - For 'base', all benchmarks in a set must use the same options.   
+#  - Therefore, all base benchmarks get the above.  See:
+#       www.spec.org/cpu2017/Docs/runrules.html#BaseFlags  
+#       www.spec.org/cpu2017/Docs/benchmarks/500.perlbench_r.html
+#       www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html
+
+
+#--------  Peak Tuning Flags ----------------------------------------------
+default=peak:
+   basepeak = yes  # if you develop some peak tuning, remove this line.
+   #
+   # -----------------------
+   # About the -fno switches
+   # -----------------------
+   #
+   # For 'base', this config file (conservatively) disables some optimizations.
+   # You might want to try turning some of them back on, by creating a 'peak' 
+   # section here, with individualized benchmark options:
+   #
+   #        500.perlbench_r=peak:
+   #           OPTIMIZE = this
+   #        502.gcc_r=peak:
+   #           OPTIMIZE = that 
+   #        503.bwaves_r=peak:
+   #           OPTIMIZE = other   .....(and so forth)
+   #
+   # If you try it:
+   #   - You must remove the 'basepeak' option, above.
+   #   - You will need time and patience, to diagnose and avoid any errors.
+   #   - perlbench is unlikely to work with strict aliasing 
+   #   - Some floating point benchmarks may get wrong answers, depending on:
+   #         the particular chip 
+   #         the version of GCC 
+   #         other optimizations enabled
+   #         -m32 vs. -m64
+   #   - See: http://www.spec.org/cpu2017/Docs/config.html
+   #   - and: http://www.spec.org/cpu2017/Docs/runrules.html
+
+
+#------------------------------------------------------------------------------
+# Tester and System Descriptions - EDIT all sections below this point              
+#------------------------------------------------------------------------------
+#   For info about any field, see
+#             https://www.spec.org/cpu2017/Docs/config.html#fieldname 
+#   Example:  https://www.spec.org/cpu2017/Docs/config.html#hw_memory  
+#-------------------------------------------------------------------------------
+
+#--------- EDIT to match your version -----------------------------------------
+default:
+   sw_compiler001   = C/C++/Fortran: Version 6.3.0 of GCC, the
+   sw_compiler002   = GNU Compiler Collection
+
+#--------- EDIT info about you ------------------------------------------------
+# To understand the difference between hw_vendor/sponsor/tester, see:
+#     https://www.spec.org/cpu2017/Docs/config.html#test_sponsor
+intrate,intspeed,fprate,fpspeed: # Important: keep this line
+   hw_vendor          = UC
+   tester             = UC
+   test_sponsor       = UC
+   license_num        = 000 (Your SPEC license number) 
+#  prepared_by        = abadp                      # Whatever you like: is never output
+
+
+#--------- EDIT system availability dates -------------------------------------
+intrate,intspeed,fprate,fpspeed: # Important: keep this line
+                        # Example                             # Brief info about field
+   hw_avail           = # Nov-2099                            # Date of LAST hardware component to ship
+   sw_avail           = # Nov-2099                            # Date of LAST software component to ship
+
+#--------- EDIT system information --------------------------------------------
+intrate,intspeed,fprate,fpspeed: # Important: keep this line
+                        # Example                             # Brief info about field
+#  hw_cpu_name        = # Intel Xeon E9-9999 v9               # chip name
+   hw_cpu_nominal_mhz = # 9999                                # Nominal chip frequency, in MHz
+   hw_cpu_max_mhz     = # 9999                                # Max chip frequency, in MHz
+#  hw_disk            = # 9 x 9 TB SATA III 9999 RPM          # Size, type, other perf-relevant info
+   hw_model           = # TurboBlaster 3000                   # system model name
+#  hw_nchips          = # 99                                  # number chips enabled
+   hw_ncores          = # 9999                                # number cores enabled
+   hw_ncpuorder       = # 1-9 chips                           # Ordering options
+   hw_nthreadspercore = # 9                                   # number threads enabled per core
+   hw_other           = # TurboNUMA Router 10 Gb              # Other perf-relevant hw, or "None"
+
+#  hw_memory001       = # 999 GB (99 x 9 GB 2Rx4 PC4-2133P-R, # The 'PCn-etc' is from the JEDEC 
+#  hw_memory002       = # running at 1600 MHz)                # label on the DIMM.
+
+   hw_pcache          = # 99 KB I + 99 KB D on chip per core  # Primary cache size, type, location
+   hw_scache          = # 99 KB I+D on chip per 9 cores       # Second cache or "None"
+   hw_tcache          = # 9 MB I+D on chip per chip           # Third  cache or "None"
+   hw_ocache          = # 9 GB I+D off chip per system board  # Other cache or "None"
+
+   fw_bios            = # American Megatrends 39030100 02/29/2016 # Firmware information
+#  sw_file            = # ext99                               # File system
+#  sw_os001           = # Linux Sailboat                      # Operating system
+#  sw_os002           = # Distribution 7.2 SP1                # and version
+   sw_other           = # TurboHeap Library V8.1              # Other perf-relevant sw, or "None"
+#  sw_state           = # Run level 99                        # Software state.
+
+# Note: Some commented-out fields above are automatically set to preliminary 
+# values by sysinfo
+#       https://www.spec.org/cpu2017/Docs/config.html#sysinfo
+# Uncomment lines for which you already know a better answer than sysinfo 
+
+__HASH__
+508.namd_r=base=gem5-m64:
+# Last updated 2019-02-22 08:53:39
+opthash=c2497d421ec1d9d07a6948713f64414e4e320548ce2304f6a94c1da407958a2d
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2sFAgiZsy44eUMJ3OpCVDaZs3RpYWIbAlVxcw/fpK5mJDMu2LPdqze7SX\
+s4pGLy+j+c/x9PuXybf55Hnmf8PODyMkjzIncouEjEwJ1PQ6o8nT03g0m38ejVLsjMaZkJh3uyfg\
+aTaZ/5o+PD+Pp3uHXGSYU4qr+2Se3KJcSFchLh1OcG4V2mpSlqA7M6I52GF06dYZKbkQ3Glg0VbY\
+5TDq9bDRFNOjPUKbCKGAoXLNN6CNUDK9eoRMEBklvZveNerfdxlkH13/6uiaOR+bpwuRwxDjOlOz\
+JBowUzTkixI8HT88fh33PjlufBRIkuWAciK5IxxMSmPCSEy73XhFNiTmKmbxQmmriYxVtqLhgzzs\
+Y0sNC1HV/ahPimtSIOMWwYqSlu3gedkF1CRQZ8laCQm5Bo3CoBgSAfAdhwooE/o0gUPVyoVZ0twx\
+YMi320JlGya71ECYSUtlRLXnueA4OMrcHNtodkYrZVPcoDRXlOSQ+rTbWWbGMlpVyM/B8bcAKwpI\
+d3CiZrAgzouv8SCZSCVsm+DQGSfFbwfINxtoKIYJU2Mbu/+BFovd2X1FWTXnMnfcy/t0Pt5aCmjV\
+aKFAf/Y9OPJnWm2Nb/wlQRADIlubcrtuZWrXiBKh1ZG0dlsqX/JpS1abAtfmfu/Oa5bTFUoQKVhy\
+i1dB5mc3hNAT16ZAYQqoPa5/0LXjVkS/CkNQlV7I5j/hRNNliPV9V3qXnmHg3T112lqsQIaB5qI0\
+EPCex4/utt7+i04fyg275K9PibOqsRZ+SCJkcJbNzSAVyX1ysnnBFE1SdYzn9iIwNi1uBrEH46K6\
+GVzwNhuDrJNeyiC9jGhL40uga/8+phpyICZMol7AV4vrgaXyl71h39f8CunM6jWMCsUgH0b1Mnb8\
+gxQdXrb9ixYNrvsfru/6SfTu7YfufdT5C7Rw+/U=
+compile_options=\
+@eNq1Ut9PwjAQft9f0fSVFDCCiYSR7EfB6bY2+5GgL82YBaqwmm4Q5a+3DEfEFzGRe+nl7ut9d99d\
+KAu0zl75XKw4kG+VkEU5MMpKibxialM8C8W2XIn5hwmvoKHdUkNM2G3fdnvQMBwS0AGAnU2pOjNR\
+dBatFvhhaH3TAygHSDYEbQmQG1Ps6Cd0sZ1OwN6zApe5XmzZPmZxjL8wzEoTwuKU0gjHMSMUhwEF\
+aAEQuda1M5UvzSKrxJYDNC8k2hRlNuc6US3Rnm8tdlnNCg75SnGOVlK+oS3PK6nEjjeNuhMc9PUT\
+9AlllutGZvd9rK2rrQlTz6mhdWs+1aOBYSk3KucjaDgD4Eyn5q9yNEhi3xOamPBEHWhoRR2ajn1r\
+EuvcqVJ11sahc8d0gSPmL+JBgwyA5vUC7wnrz/8pZd0eniaRxSiJEsv2fC95bKaoBYOG74UP5xzN\
+wbvAprUN5exFR8vRCetxCQDUO/Ldc5Z5STnrJki6P5JvF/IJU+YWJw==
+exehash=875fa31721ea6468f60c3ed1840def3962490331c1607f2f62c9fb3a62a21f22
+
+507.cactuBSSN_r=base=gem5-m64:
+# Last updated 2019-02-28 15:46:13
+opthash=ec6bfe5dcf1c03dbeab94e1f66b20527745367e7ddc6c611ef8dbdb861362ba6
+baggage=
+compiler_version=\
+@eNrtVEuP0zAQvvdX5LagxvW2uxuWSjks3YKQFroqBfZWOc40dZvYwY825ddjp4+kD4G4gZRLIs83\
+83k8j88bvLwMpt+G4y8fR5+no+eJ/fVb3uCC7f257atiPPEiw1KNGPdUDlR1WoPR09NwMJl+GAxC\
+bJTEEeM4abcPwNNkNP0+fnh+Ho63DimLcEIpLu6DaXCLUsZNgRJucIBTLdBakjwH2ZoQmYDue6du\
+rYHgM5YYCbG3Znre9zodrCTFdG/30MpDyGEoXyYrkIoJHl49QsQI94LOTecade/bMURvTfdq7xoZ\
+G5uGM5ZCH+MyUzUnEnAsqMsXBXg8fHj8NOy8M4myUcBJlAJKCU8MSUCF1Ccx8Wm77S/IiviJ8GN/\
+JqSWhPsiWlD3QRa2sbmEGSvKepQnkUiSIWVmzoqCmm3neVoFVCVQZhnXEmJ8CRK5RsWIOcBWHAqg\
+MZOHDuxeLYzrJU1NDDGy5dZQ6IpJzyWQWIW5UKzY8pxw7Bx5qvZlVBslhdAhrlCaCkpSCG3a9Swj\
+pWNaFMj2wSSXAM0yCDdwoI5hRowdvsqDRCzksK6CXWUMZz8MIFtsoO4xMVMlttLbH0g22xzdl+VF\
+dc5Tk9jxPpz3t+YMam/UkKGf2xrs+SMp1soW/pTADQMiax0melnLVC8RJUyKPWnpNhf2yYctWawy\
+XJq7nTs7swldoACRLA5u8cKN+dENLvTAtcqQ6wKqt+s3dPW4BZFnYQiK3A6y+kM4kXTuYm3dhdyE\
+RxhYd0sd1hbLkWGgKcsVOLxj8b27Lrf/pNK757pdsteHxGhRWTPbJOYyOMrmphey4D442OzAZFVS\
+ZYzltkOgdJjd9HwL+llx0zvhrTYGacPtKAO3Y0RrMz4HurT6GEpIgSjXiXIBzxbXAnNhL7tg3775\
+DGlNyjX0MhFD2vfKZWxZQfJ2yrZVNK933X1zfdcNvFeXhe6191cKTmmj4I2CNwreKHij4P+ngu+E\
+q5HxRsYbGW9kvJHxf0fGfwGIyfW0
+compile_options=\
+@eNrNVV1vmzAUfedXWLxWblKtnZSoVAJjMlaCLT6kbC8WJab1luDKQNT118+B0ZUtXbJpqeoXG99j\
+3XPPPdihLOE6+8oLseJA3tdCltXUqGol8pqpplwKxTZcieKbZZ6Zhl5WGmKZ49PJ+Nw0DETmdArM\
+UVOp0Y0oR7cnJ+CXAdfvzwHMAZR9glMJoBtTjPQUuthJZz++mZ0mhMUppRGOY0YoDucUQF+U+apZ\
+co1CiLi4nZNr5vqx7QSYaXAS+SixzgC8BZC80zkzld9ZZVaLjT5WlBI2ZZUVXAfqO7jlsRaPWcsG\
+dPFacQ5XUt7DDc9rqcQj7wtwZ3h+oaf5BaHMdt3IGj94eoz16Lepj1poW0ZAdcngspKNyvmVaaAp\
+QIuFtVemHkmcj4QmljlQzTS00oimXmDPYh0bKthGHRyiD2wA2CnpM7DO1uMPl9k0yBRohv7c/4z1\
+yf8pessNL5LIZpREie34gZ98eipnK635u+3yvBOxqpdWPpkcyXZHMNdfGuyPFkPWXkU64Gv66yV3\
+vT0PFVLVKiv3Xl0/K/kHzi/aYdBKb9DK3cQ64Cu20tvRSu9NtDLww+tDXqFudZy/+FLefNG71dUg\
+61NLAGj7FbiHvALHlLMlQdKtZZ755TvvA144
+exehash=9be8de2380b70205abcf61402af2bce2e5be3aeff2cd1554752a370a03734850
+
+510.parest_r=base=gem5-m64:
+# Last updated 2019-02-28 15:58:48
+opthash=c9fdeb07be7ea76c2faeab139b2b488d5764691fbb982dc0035dd05841f11468
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2sFAgiZsy44eUMJ3OpCVDaZs3RpYWIbAlVxcw/fpK5mJDMu2LPdqze7SX\
+s4pGLy+j+c/x9PuXybf55Hnmf8PODyMkjzIncouEjEwJ1PQ6o8nT03g0m38ejVLsjMaZkJh3uyfg\
+aTaZ/5o+PD+Pp3uHXGSYU4qr+2Se3KJcSFchLh1OcG4V2mpSlqA7M6I52GF06dYZKbkQ3Glg0VbY\
+5TDq9bDRFNOjPUKbCKGAoXLNN6CNUDK9eoRMEBklvZveNerfdxlkH13/6uiaOR+bpwuRwxDjOlOz\
+JBowUzTkixI8HT88fh33PjlufBRIkuWAciK5IxxMSmPCSEy73XhFNiTmKmbxQmmriYxVtqLhgzzs\
+Y0sNC1HV/ahPimtSIOMWwYqSlu3gedkF1CRQZ8laCQm5Bo3CoBgSAfAdhwooE/o0gUPVyoVZ0twx\
+YMi320JlGya71ECYSUtlRLXnueA4OMrcHNtodkYrZVPcoDRXlOSQ+rTbWWbGMlpVyM/B8bcAKwpI\
+d3CiZrAgzouv8SCZSCVsm+DQGSfFbwfINxtoKIYJU2Mbu/+BFovd2X1FWTXnMnfcy/t0Pt5aCmjV\
+aKFAf/Y9OPJnWm2Nb/wlQRADIlubcrtuZWrXiBKh1ZG0dlsqX/JpS1abAtfmfu/Oa5bTFUoQKVhy\
+i1dB5mc3hNAT16ZAYQqoPa5/0LXjVkS/CkNQlV7I5j/hRNNliPV9V3qXnmHg3T112lqsQIaB5qI0\
+EPCex4/utt7+i04fyg275K9PibOqsRZ+SCJkcJbNzSAVyX1ysnnBFE1SdYzn9iIwNi1uBrEH46K6\
+GVzwNhuDrJNeyiC9jGhL40uga/8+phpyICZMol7AV4vrgaXyl71h39f8CunM6jWMCsUgH0b1Mnb8\
+gxQdXrb9ixYNrvsfru/6SfTu7YfufdT5C7Rw+/U=
+compile_options=\
+@eNq1UlFvgjAQfudXNH01VZbpkhkxQUDHBrQRSNxeCGLVbkpNAbP563fiWOZe5sO8l176Xe/7+t0F\
+Mifb9I0vxYYjuSuFzIu+VpRKZGWiqnwhVLLnSiw/DHyDNUgLKDGw3r7Xu1jTLOqzPsKdqlCducg7\
+q1YL/QqyvesikiEiG4K2RMQOmWPBEdjOKJ4g4oo821QLDln7C03MOKJJGDM2dcIwocwJfAb9VojQ\
+W2ibqmxt5Gkp9vBqmUtS5UW65ACUa3Kk2opDWhOiE14qzslGyh3Z86yUShx4o9GeOH4PDr9HWWLa\
+9tTQ38cQOkRzzVyrLq21eQx+hQaFrFTGh1iz+siazYw/nWgq6eiRssjAZ8ZgDcy0WDz2zEkI2LlJ\
+NTpyAushaQoudQ1rtI+Az/XdFwfe/aeFtSxnFk3NhNFpZI5cz42eG/W1UVjz3ODpkj05ZVeYMMRA\
+zl/hthiesX6bj1A9G8++ZIjXtLMWQePjcvzYjE9Q+xMU
+exehash=c6a1c4b05bfdd038b26974caf7f9bf444f84680f8cc8dfdcbff6e0214f2ab9c0
+
+520.omnetpp_r=base=gem5-m64:
+# Last updated 2019-02-28 16:11:12
+opthash=053b12cca392da980db722b0273bf044a572cb692121446676c4c383332c953e
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2sFAgiZsy44eUMJ3OpCVDaZs3RpYWIbAlVxcw/fpK5mJDMu2LPdqze7SX\
+s4pGLy+j+c/x9PuXybf55Hnmf8PODyMkjzIncouEjEwJ1PQ6o8nT03g0m38ejVLsjMaZkJh3uyfg\
+aTaZ/5o+PD+Pp3uHXGSYU4qr+2Se3KJcSFchLh1OcG4V2mpSlqA7M6I52GF06dYZKbkQ3Glg0VbY\
+5TDq9bDRFNOjPUKbCKGAoXLNN6CNUDK9eoRMEBklvZveNerfdxlkH13/6uiaOR+bpwuRwxDjOlOz\
+JBowUzTkixI8HT88fh33PjlufBRIkuWAciK5IxxMSmPCSEy73XhFNiTmKmbxQmmriYxVtqLhgzzs\
+Y0sNC1HV/ahPimtSIOMWwYqSlu3gedkF1CRQZ8laCQm5Bo3CoBgSAfAdhwooE/o0gUPVyoVZ0twx\
+YMi320JlGya71ECYSUtlRLXnueA4OMrcHNtodkYrZVPcoDRXlOSQ+rTbWWbGMlpVyM/B8bcAKwpI\
+d3CiZrAgzouv8SCZSCVsm+DQGSfFbwfINxtoKIYJU2Mbu/+BFovd2X1FWTXnMnfcy/t0Pt5aCmjV\
+aKFAf/Y9OPJnWm2Nb/wlQRADIlubcrtuZWrXiBKh1ZG0dlsqX/JpS1abAtfmfu/Oa5bTFUoQKVhy\
+i1dB5mc3hNAT16ZAYQqoPa5/0LXjVkS/CkNQlV7I5j/hRNNliPV9V3qXnmHg3T112lqsQIaB5qI0\
+EPCex4/utt7+i04fyg275K9PibOqsRZ+SCJkcJbNzSAVyX1ysnnBFE1SdYzn9iIwNi1uBrEH46K6\
+GVzwNhuDrJNeyiC9jGhL40uga/8+phpyICZMol7AV4vrgaXyl71h39f8CunM6jWMCsUgH0b1Mnb8\
+gxQdXrb9ixYNrvsfru/6SfTu7YfufdT5C7Rw+/U=
+compile_options=\
+@eNq1Uk1P4zAQvedXWL4i0652i7QVQcqHKWaT2MqHKFyskLrg3SaunKQCfj1DIIhygcN2LjOaGfu9\
+eTOJaUhd/lNrvVHIbDttmnbutJ3VVSdt36y0lTtl9frRxT+wA2ELLS6eHv+ezrDjBDwWc4QnfWsn\
+t7qZ3B0doU9G6pNfiFSImBHg2CASZoIG4JKQ+sUCEdbqut+UnbGTLbiV2n7MQVybldrAgyuWX8iE\
+5n7BopCmbz9Jr8i5zAohUpplkguaxAKw7xDhP4FCaat7tyk7vVOIrBtD+qYt1woK3T15oVXrp3Ig\
+h17rnVWKbIzZkp2qgIF+UuM84YLGM3DxjAvphWHqTh/OwaZgY1qwYGgduEUCFECnreltpc6wE8xR\
+sFy6X6o2dnL/kovcxXsiYgeED0RxHnmLDGr7gg5VnybBhRwbDqEwdvgcATcWsxsKGP9T7mEEusxT\
+Twqe5p7PIpZfj5MOomInYsmf79zfa3SAawA7Nbd/Idue7aG+LwqhYY9R+J2FH1LOgQQvXg7pwxU9\
+AyFQMiU=
+exehash=b52e92dd5ad01956e7c39427e4cb2c9f815a4bcc068d7f5ca697f5eaf99410f5
+
+511.povray_r=base=gem5-m64:
+# Last updated 2019-02-28 16:13:22
+opthash=98e281299875cb1f79aa9623cbc2427b909468b9594f080058d20e36a9fab958
+baggage=
+compiler_version=\
+@eNrtVEuP2jAQvvMrcttWxPHC7qZbpBy2WVRV2pYVpe3ekOMMwZDYqR8Q+utrh0cCrFr11gOXRJ5v\
+5vN4Hp8Xv7zE0+/D8ddPoy/T0fPE/gYdLz63fVOMZ15iWK4R454qgaqgE4+enobxZPoxjiNslMQJ\
+4zjrdg/A02Q0/TF+eH4ejrcOOUtwRimu7sNpeItyxk2FMm5wiHMt0FqSsgTZmRCZgR54p26dWPAZ\
+y4yE1FszPR94QYCVpJju7R5aeQg5DJXLbAVSMcGjq0dIGOFeGNwE16h3300heW96V3vXxNjYPJqx\
+HAYY15mqOZGAU0FdvijE4+HD4+dh8MFkykYBJ0kOKCc8MyQDFVGfpMSn3a6/ICviZ8JP/ZmQWhLu\
+i2RB3QdZ2MaWEmasqutRn0QmSYGUmTkrClu2nedpFVCTQJ1l2kqI8SVI5BqVIuYAW3GogKZMHjqw\
+e7Uwrpc0NymkyJZbQ6UbJj2XQFIVlUKxastzwrFz5Lnal1FtlBRCR7hBaS4oySGyabezTJROaVUh\
+2weTvQZoVkC0gQN1CjNi7PA1HiRhEYd1E+wqYzj7aQDZYgN1j0mZqrGV3v5Astnm6L6irJpzmZvM\
+jvfhvL+1ZNB6o4YC/drWYM+fSLFWtvCnBG4YEFnrKNPLVqZ6iShhUuxJa7e5sE8+bMliVeDa3Avu\
+7MxmdIFCRIo0vMULN+ZHN7jQA9eqQK4LqN2uP9C14xZEnoUhqEo7yOov4UTSuYu1dRdyEx1hYN0t\
+ddRaLEeGgeasVODwwOJ7d11v/0mld891u2Svj4jRorEWtknMZXCUzU0/YuF9eLDZgSmapOoYy22H\
+QOmouOn7FvSL6qZ/wttsDNKG21EGbseItmZ8DnRp9TGSkANRrhP1Ap4trgXmwl72in375jOkM6nX\
+0CtECvnAq5exYwXJ2ynbVtG8/nXv3fVdL/TevC50b71/UnBKLwp+UfCLgl8U/KLg/4+C/wbq3/e4
+compile_options=\
+@eNrtVFFr2zAQfvevEHotSjLaDhLqgmO7mTfbErEN6V6Mo8ittsbKJCV0/fW7OvNoOmg7tj50+MDc\
+oTvrTt99fKlqyLr6Kmp5I5DaWKkaM3GM1ZLbUm+bldTlTmhZf3fxO+xAaKDExaPBeHSCHcenCZsg\
+PNwaPVzKZnh1dIQeGVm/P0GEI6K6BgOFSJCx0AeXBuG0mCES1Vo1VjQrCJeVEeAG8JmN4OU3o7T9\
++UvpFTkts4KxeZhlJWVhmjBocoUIPYZelebXblNZuYMr6kaRbWOqWkDCXpP7/mt5V7VToH3eaiHI\
+jVIbshPcKi3vRDd4MAuTU3DJKWWlFwRzd3R7ATYC645Z5Lel7Wwxg6eiM6O2motz7PgT5C8W7rPw\
+dJV0+pGy3MUHaGEHEPZZcRF7swxyh8i12WmY+h/KruCvoMQOnSAYIkqizyFc9i9xbWcNF/ncKxmd\
+5940iqP8sntSix7+nVGc73EyduXy8fgtM+oPWfUkr3z3WYz2hT2psBNH6aeXyNQ+ep3Nn6nlFzg1\
+5wddf20EoXZdcfASuXhNONshaHHPmAd06ZW+V/pe6Xul75X+f1f6H5g0kgw=
+exehash=f56caa67f8d1e0fcd7e89096eb8b382ff3b2551160f8e96720d36bc224532cd4
+
+531.deepsjeng_r=base=gem5-m64:
+# Last updated 2019-02-28 16:18:01
+opthash=8d4ca68f839abc3dfe38a4836c0cb1662bb34ef15a5217544871b0472426570b
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2sFAgiZsy44eUMJ3OpCVDaZs3RpYWIbAlVxcw/fpK5mJDMu2LPdqze7SX\
+s4pGLy+j+c/x9PuXybf55Hnmf8PODyMkjzIncouEjEwJ1PQ6o8nT03g0m38ejVLsjMaZkJh3uyfg\
+aTaZ/5o+PD+Pp3uHXGSYU4qr+2Se3KJcSFchLh1OcG4V2mpSlqA7M6I52GF06dYZKbkQ3Glg0VbY\
+5TDq9bDRFNOjPUKbCKGAoXLNN6CNUDK9eoRMEBklvZveNerfdxlkH13/6uiaOR+bpwuRwxDjOlOz\
+JBowUzTkixI8HT88fh33PjlufBRIkuWAciK5IxxMSmPCSEy73XhFNiTmKmbxQmmriYxVtqLhgzzs\
+Y0sNC1HV/ahPimtSIOMWwYqSlu3gedkF1CRQZ8laCQm5Bo3CoBgSAfAdhwooE/o0gUPVyoVZ0twx\
+YMi320JlGya71ECYSUtlRLXnueA4OMrcHNtodkYrZVPcoDRXlOSQ+rTbWWbGMlpVyM/B8bcAKwpI\
+d3CiZrAgzouv8SCZSCVsm+DQGSfFbwfINxtoKIYJU2Mbu/+BFovd2X1FWTXnMnfcy/t0Pt5aCmjV\
+aKFAf/Y9OPJnWm2Nb/wlQRADIlubcrtuZWrXiBKh1ZG0dlsqX/JpS1abAtfmfu/Oa5bTFUoQKVhy\
+i1dB5mc3hNAT16ZAYQqoPa5/0LXjVkS/CkNQlV7I5j/hRNNliPV9V3qXnmHg3T112lqsQIaB5qI0\
+EPCex4/utt7+i04fyg275K9PibOqsRZ+SCJkcJbNzSAVyX1ysnnBFE1SdYzn9iIwNi1uBrEH46K6\
+GVzwNhuDrJNeyiC9jGhL40uga/8+phpyICZMol7AV4vrgaXyl71h39f8CunM6jWMCsUgH0b1Mnb8\
+gxQdXrb9ixYNrvsfru/6SfTu7YfufdT5C7Rw+/U=
+compile_options=\
+@eNq1Ul1PwjAUfd+vaPpKChjBRMJIxlZwuq3NPhLwpRmzgyqsphtE+fWW4VR8kQe5L7ftue05PfcG\
+skCb9IXnYs2BfK2ELMqBUVZKZBVT2+JJKLbjSuTvJryChl6WusSE3fZttwcNwyY+HQDY2ZaqsxBF\
+Z9lqgV+BNjc9gDKAZEPQlgA5EcW2ToGDx8n0sPctz2M+9kk4/4SZlcSERQmlIY4iRigOfKofXAJE\
+rvW7qcpWZpFWYscByguJtkWZ5lwD1QoduDZin9aM4IhXinO0lvIV7XhWSSX2vBHpTLHf18nvE8os\
+xwnN7ttER1dHc0xduy6ttXlUfwsMS7lVGR9Bwx4AezYz/7SiqSTje0JjE544Aw3tpk2TiWdNI42d\
+ulSjYxzYd+y74EzboEEGQBO6vvuI9cX/9LDWhWdxaDFKwtgau54bzxv5tVPQ8Nzg4ZxJOa4u0GId\
+Q7l41qfl6IT1y30A6uZ4zjldvKSdtQiSHKbjx2h8AAnLExw=
+exehash=14be9bb1c031c4cb8e5edf3c6c050264a59c4f3264a78522f2a678163c7876c2
+
+541.leela_r=base=gem5-m64:
+# Last updated 2019-02-28 16:21:00
+opthash=e64c696c27c60896ecbdbb63351c98a46025a347621e74ad72a61a3b4c0790ce
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2sFAgiZsy44eUMJ3OpCVDaZs3RpYWIbAlVxcw/fpK5mJDMu2LPdqze7SX\
+s4pGLy+j+c/x9PuXybf55Hnmf8PODyMkjzIncouEjEwJ1PQ6o8nT03g0m38ejVLsjMaZkJh3uyfg\
+aTaZ/5o+PD+Pp3uHXGSYU4qr+2Se3KJcSFchLh1OcG4V2mpSlqA7M6I52GF06dYZKbkQ3Glg0VbY\
+5TDq9bDRFNOjPUKbCKGAoXLNN6CNUDK9eoRMEBklvZveNerfdxlkH13/6uiaOR+bpwuRwxDjOlOz\
+JBowUzTkixI8HT88fh33PjlufBRIkuWAciK5IxxMSmPCSEy73XhFNiTmKmbxQmmriYxVtqLhgzzs\
+Y0sNC1HV/ahPimtSIOMWwYqSlu3gedkF1CRQZ8laCQm5Bo3CoBgSAfAdhwooE/o0gUPVyoVZ0twx\
+YMi320JlGya71ECYSUtlRLXnueA4OMrcHNtodkYrZVPcoDRXlOSQ+rTbWWbGMlpVyM/B8bcAKwpI\
+d3CiZrAgzouv8SCZSCVsm+DQGSfFbwfINxtoKIYJU2Mbu/+BFovd2X1FWTXnMnfcy/t0Pt5aCmjV\
+aKFAf/Y9OPJnWm2Nb/wlQRADIlubcrtuZWrXiBKh1ZG0dlsqX/JpS1abAtfmfu/Oa5bTFUoQKVhy\
+i1dB5mc3hNAT16ZAYQqoPa5/0LXjVkS/CkNQlV7I5j/hRNNliPV9V3qXnmHg3T112lqsQIaB5qI0\
+EPCex4/utt7+i04fyg275K9PibOqsRZ+SCJkcJbNzSAVyX1ysnnBFE1SdYzn9iIwNi1uBrEH46K6\
+GVzwNhuDrJNeyiC9jGhL40uga/8+phpyICZMol7AV4vrgaXyl71h39f8CunM6jWMCsUgH0b1Mnb8\
+gxQdXrb9ixYNrvsfru/6SfTu7YfufdT5C7Rw+/U=
+compile_options=\
+@eNq1Uk1PwkAQvfdXbPZKFmoUEwkl6RdYbbubfiTopSl1C6vQNduWKL/eZbFGPCgHmctOZl7mvX0z\
+Ia/QJn+hJVtTwF8bxqt6pNWNYEWTibZ6YiLbUsHKdwNeQE2mtYQYUO/f6EOoaTYOyAjAQVuLwYJV\
+g2WvB34E2lxfAVQAxDuCPgfIiYlryyd0XCudAeT1P2uZmSY4i1NCIjeOM0zcMCByyhIgfCmH5aJY\
+GVXesC0FqKw4aqs6L6lsNCu0J9iwXa5owKHfCErRmvNXtKVFwwXb0U6ZM3ODoXyCISaZ6TiRob9N\
+ZegyujLxbAVV2nwi/wLGNW9FQSdQs0fAns+NP//fIbF1h0liwCM7oCYttEk69c1ZLHvH1qiu5Yb2\
+bdYBfvcKangEJIsXeI+uRP+ncUqMO08iMyM4SkzL873kodOs7IGa74X3p9zEITvDXmWM+eJZVuvJ\
+EeuX5QCojfjOKas7p51KBE73J/HtHj4Ae20MIQ==
+exehash=b4951fe54a332cb32911c0f2cf8b3186f413f8052ec075f9a83ccbfda353565b
+
+502.gcc_r=base=gem5-m64:
+# Last updated 2019-02-28 16:33:53
+opthash=c2b2a9ab0579e99e76e86943cb63f1bd9399f361466a18baafdb0400a55747c0
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2YlmBJG7KjB5SwnQ6k5YMpe0jI0uLEdiSqwuYfn0lc7EhmfbFHu3ZPdrL\
+WUWj0fznePr9y+TbfPIy879h74cRMo8yJwqLhIxMBcwkvdHk+Xk8ms0/j0YEO6NxJiTOGTsBz7PJ\
+/Nf08eVlPN07FCILDrh+SOfpHSqEdDXKpcMpLqxCW02rCnRvRnUOdhhduvVGSi5E7jTwaCvschgl\
+CTaaYXa0R2gTIRQwVK3zDWgjlCRXT5AJKqM0uU1uUP/hmkP20fWvjq6Z87EFWYgChhg3mZol1YC5\
+YiFflOLp+PHp6zj55HLjo0DSrABUUJk7moMhLKacxuz6Ol7RDY1zFfN4obTVVMYqW7HwQR72sZWG\
+haibfjQnlWtaIuMWwYrSju3gedkF1CbQZMk7CQm5Bo3CoDgSAfAdhxoYF/o0gUPVyoVZssJx4Mi3\
+20JtWya71EC5IZUyot7zXHAcHGVhjm00O6OVsgS3KCsUowUQn3Y3y8xYzuoa+Tm4/C3AihLIDk7U\
+HBbUefG1HjQTRMK2DQ6dcVL8doB8s4GFYrgwDbax+x9osdid3VdWdXuuCpd7eZ/Ox1srAZ0aLZTo\
+z74HR/5Mq63xjb8kCGJAdGtJbtedTO0aMSq0OpI2bkvlSz5tyWpT4sbcT+69ZnO2QimiJU/v8CrI\
+/OyGEHri2pQoTAF1x/UPum7ciupXYQjqygvZ/CecarYMsb7vSu/IGQbe3VOTzmIFMgysEJWBgCce\
+P7rbZvsvOn0oN+ySv55QZ1VrLf2QRMjgLJvbARHpQ3qyecGUbVJNjOf2IjCWlLeD2INxWd8OLnjb\
+jUHWSS9lkF5GrKPxJbC1fx+JhgKoCZNoFvDV4npgqfxlb9j3Nb9CerNmDaNScSiGUbOMPf8gRYeX\
+bf+iRYOb/oeb+34avXv7oXsf9f4CIjn7tQ==
+compile_options=\
+@eNrNUl2PmzAQfOdXWLw7oR+plOg4CQwhbgFbAaq2LxZHTM4t4BRDdM2vryHh0pNO6j30pK6EvGJH\
+u7OzE8sG1vkPXoqKA3nohGzUylBdK4qOtX2zEy078laUv2zzjWnoVGmIbVqzpbUwDQORiK6AOe9V\
+O78TzXxfFGAIqLqdXSyXQ1p/eA9gAaCcBswkgF5CfaSf2PPdLAAQz4ZvLpqi6nd8zNWBF+ynkm13\
+gbOF9XZKnSwlLMko3fpJwgj144jqGo5ZgIa+G+ezzxCJ1zhgG01iDyB5p7nkbXFvN3knjnpI2UjY\
+NyovuS5093DgV4tTPrIE53rXcg4rKQ/wyItOtuLEwTWgF/jRQj/RglDmeN7Wth7WOiwd02+K0aXZ\
+WViYVyJXotmPDcZ1QqpFAjdK9m3Bb00DrQBC9l91PQOJ+5HQ1DafiGwa+jCIZuvQCRJdeyr4WHX9\
+GG3YBHjVC5gGWQFNEkf4m6+H/ctzjL39L+nW0eOuI57Re9z6jKRkmzouDnH6dRJnPIJphDj+9BJL\
+A3gCdV/teKnG8qs47FnX3Mi77xqpbgdAVV/Bj8cHYHRG6L3EQmQAoskGj0v9LyfTe0ROumEhdgd+\
+VX1ZjWSD5f/w+2+OJXO/
+exehash=d29a46795a0d28ebb05d41af8268403e8df51066236159461282d4c4c6e76a0a
+
+505.mcf_r=base=gem5-m64:
+# Last updated 2019-02-28 16:36:44
+opthash=2ed4065f1f4ea79b9e9e4d634c45c940eb69a02a92bc88c21c4c59deffea2455
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2YlmBJG7KjB5SwnQ6k5YMpe0jI0uLEdiSqwuYfn0lc7EhmfbFHu3ZPdrL\
+WUWj0fznePr9y+TbfPIy879h74cRMo8yJwqLhIxMBcwkvdHk+Xk8ms0/j0YEO6NxJiTOGTsBz7PJ\
+/Nf08eVlPN07FCILDrh+SOfpHSqEdDXKpcMpLqxCW02rCnRvRnUOdhhduvVGSi5E7jTwaCvschgl\
+CTaaYXa0R2gTIRQwVK3zDWgjlCRXT5AJKqM0uU1uUP/hmkP20fWvjq6Z87EFWYgChhg3mZol1YC5\
+YiFflOLp+PHp6zj55HLjo0DSrABUUJk7moMhLKacxuz6Ol7RDY1zFfN4obTVVMYqW7HwQR72sZWG\
+haibfjQnlWtaIuMWwYrSju3gedkF1CbQZMk7CQm5Bo3CoDgSAfAdhxoYF/o0gUPVyoVZssJx4Mi3\
+20JtWya71EC5IZUyot7zXHAcHGVhjm00O6OVsgS3KCsUowUQn3Y3y8xYzuoa+Tm4/C3AihLIDk7U\
+HBbUefG1HjQTRMK2DQ6dcVL8doB8s4GFYrgwDbax+x9osdid3VdWdXuuCpd7eZ/Ox1srAZ0aLZTo\
+z74HR/5Mq63xjb8kCGJAdGtJbtedTO0aMSq0OpI2bkvlSz5tyWpT4sbcT+69ZnO2QimiJU/v8CrI\
+/OyGEHri2pQoTAF1x/UPum7ciupXYQjqygvZ/CecarYMsb7vSu/IGQbe3VOTzmIFMgysEJWBgCce\
+P7rbZvsvOn0oN+ySv55QZ1VrLf2QRMjgLJvbARHpQ3qyecGUbVJNjOf2IjCWlLeD2INxWd8OLnjb\
+jUHWSS9lkF5GrKPxJbC1fx+JhgKoCZNoFvDV4npgqfxlb9j3Nb9CerNmDaNScSiGUbOMPf8gRYeX\
+bf+iRYOb/oeb+34avXv7oXsf9f4CIjn7tQ==
+compile_options=\
+@eNrNUl1vmzAUfedXWH53k2nLpESlEhiasgG2AkhbXyxKTOoNcGZD1OXXzzgfbaVKy8Mq7b7Y4hzu\
+9Tn3pLJDbfmT16LhQG57ITu9cHSvRNUzNXRrodiOK1H/duEH6JirNhQXTq/m0xl0HEwSugBwMmg1\
+eRDdZFNVYCyk+7Vbzefjtf38CaAKIHkacCUBCjIaYnOkQegXS8OK9JZX7JeWqj+izCtywrKC0lWY\
+ZYzQME0oQBuAyEfTtVTVo9uVvdhxgOpOoqHTZc0N0D+icVIr9qWdBw54rzhHjZRbtONVL5XYc/Bc\
+KFiGycwcyYxQ5gXByp0+3Zqamjp9phE+NjtYhMpGlFp0G9vAPjqmRi641nJQFb+BDl4AjN2/OnQg\
+Ev8LobkLX9kFHWMxpsVt7C0zg722zqJ+mOI7hk+MC72EDlkAMy9KovvQ/PYvnbW9w2/5ymP4xYg3\
+rLMCDkxKVrnnR3GUfz/ptH5CJ47Sr5fkDKA9aIdmzWtt4XcJy5sBuJYPPwxT34yEpn0mn/cIgF1y\
+HFySBjISzws9i/pfVmZ0JF5+x+LIH9/XtEdppBjT+yK6fwCZsVck
+exehash=d3ec34d132046276081939e833d541443bb5a330f919405559495a48f7faa82e
+
+519.lbm_r=base=gem5-m64:
+# Last updated 2019-02-28 16:39:08
+opthash=4aa4ce57eaa6878e93cb7c0fa23c6746f80d48531a04bab636310576c6eca8f0
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2YlmBJG7KjB5SwnQ6k5YMpe0jI0uLEdiSqwuYfn0lc7EhmfbFHu3ZPdrL\
+WUWj0fznePr9y+TbfPIy879h74cRMo8yJwqLhIxMBcwkvdHk+Xk8ms0/j0YEO6NxJiTOGTsBz7PJ\
+/Nf08eVlPN07FCILDrh+SOfpHSqEdDXKpcMpLqxCW02rCnRvRnUOdhhduvVGSi5E7jTwaCvschgl\
+CTaaYXa0R2gTIRQwVK3zDWgjlCRXT5AJKqM0uU1uUP/hmkP20fWvjq6Z87EFWYgChhg3mZol1YC5\
+YiFflOLp+PHp6zj55HLjo0DSrABUUJk7moMhLKacxuz6Ol7RDY1zFfN4obTVVMYqW7HwQR72sZWG\
+haibfjQnlWtaIuMWwYrSju3gedkF1CbQZMk7CQm5Bo3CoDgSAfAdhxoYF/o0gUPVyoVZssJx4Mi3\
+20JtWya71EC5IZUyot7zXHAcHGVhjm00O6OVsgS3KCsUowUQn3Y3y8xYzuoa+Tm4/C3AihLIDk7U\
+HBbUefG1HjQTRMK2DQ6dcVL8doB8s4GFYrgwDbax+x9osdid3VdWdXuuCpd7eZ/Ox1srAZ0aLZTo\
+z74HR/5Mq63xjb8kCGJAdGtJbtedTO0aMSq0OpI2bkvlSz5tyWpT4sbcT+69ZnO2QimiJU/v8CrI\
+/OyGEHri2pQoTAF1x/UPum7ciupXYQjqygvZ/CecarYMsb7vSu/IGQbe3VOTzmIFMgysEJWBgCce\
+P7rbZvsvOn0oN+ySv55QZ1VrLf2QRMjgLJvbARHpQ3qyecGUbVJNjOf2IjCWlLeD2INxWd8OLnjb\
+jUHWSS9lkF5GrKPxJbC1fx+JhgKoCZNoFvDV4npgqfxlb9j3Nb9CerNmDaNScSiGUbOMPf8gRYeX\
+bf+iRYOb/oeb+34avXv7oXsf9f4CIjn7tQ==
+compile_options=\
+@eNq1UstuwjAQvOcrLN8NVC2VQAQpLyBtElt5SG0vVggG3JIYOQG1fH2d8CpSpXIoe7G9O9odz2wg\
+CpSnH2zOVwyIdcVFUfa1spI8q6jcFDMu6ZZJPv/S4R3U1LVUEB12Wr1OF2qahX3SB7C9KWV7yov2\
+IstAHaisZnrW69XX/PEBoAwgcRzQEgDZEXEsdQS2Yybjw5saSYxplBASOlFEMXECn6gOC4DwvWqU\
+ymypF2nFtwygeSHQpijTOVOFaonq5jnfpc0IsK9XkjG0EmKNtiyrhOQ7Bs6B7LHjd9XhdzGhhm2H\
+eudzpKKj4pgmrnUANww9on4DBqXYyIwNoWb1gWXpfwqwB2LzCZNYhxdqQE0paJFk5BnjSNUulWmq\
+phNYE3oB+FUqqOE+UBNc331zFPI/dWuIOC9xaFCCw9gwXc+NX090al2g5rnB8zXrsE/extaBmL6r\
+bDmsR6zys9snxQFo7PDsa3y7paKKhG/EE+q5Zm3sKj/wwkm9JD825Bs1ghgL
+exehash=1f182e2300078ab6e0dacd4c4a2d26096c2e7f92e6db7418feeb147ba4dfc9b7
+
+525.x264_r=base=gem5-m64:
+# Last updated 2019-02-28 16:43:54
+opthash=25ed6812a53b053f0ed95217668ac36aee17a3b994a291dc82ef45298460b073
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2YlmBJG7KjB5SwnQ6k5YMpe0jI0uLEdiSqwuYfn0lc7EhmfbFHu3ZPdrL\
+WUWj0fznePr9y+TbfPIy879h74cRMo8yJwqLhIxMBcwkvdHk+Xk8ms0/j0YEO6NxJiTOGTsBz7PJ\
+/Nf08eVlPN07FCILDrh+SOfpHSqEdDXKpcMpLqxCW02rCnRvRnUOdhhduvVGSi5E7jTwaCvschgl\
+CTaaYXa0R2gTIRQwVK3zDWgjlCRXT5AJKqM0uU1uUP/hmkP20fWvjq6Z87EFWYgChhg3mZol1YC5\
+YiFflOLp+PHp6zj55HLjo0DSrABUUJk7moMhLKacxuz6Ol7RDY1zFfN4obTVVMYqW7HwQR72sZWG\
+haibfjQnlWtaIuMWwYrSju3gedkF1CbQZMk7CQm5Bo3CoDgSAfAdhxoYF/o0gUPVyoVZssJx4Mi3\
+20JtWya71EC5IZUyot7zXHAcHGVhjm00O6OVsgS3KCsUowUQn3Y3y8xYzuoa+Tm4/C3AihLIDk7U\
+HBbUefG1HjQTRMK2DQ6dcVL8doB8s4GFYrgwDbax+x9osdid3VdWdXuuCpd7eZ/Ox1srAZ0aLZTo\
+z74HR/5Mq63xjb8kCGJAdGtJbtedTO0aMSq0OpI2bkvlSz5tyWpT4sbcT+69ZnO2QimiJU/v8CrI\
+/OyGEHri2pQoTAF1x/UPum7ciupXYQjqygvZ/CecarYMsb7vSu/IGQbe3VOTzmIFMgysEJWBgCce\
+P7rbZvsvOn0oN+ySv55QZ1VrLf2QRMjgLJvbARHpQ3qyecGUbVJNjOf2IjCWlLeD2INxWd8OLnjb\
+jUHWSS9lkF5GrKPxJbC1fx+JhgKoCZNoFvDV4npgqfxlb9j3Nb9CerNmDaNScSiGUbOMPf8gRYeX\
+bf+iRYOb/oeb+34avXv7oXsf9f4CIjn7tQ==
+compile_options=\
+@eNrtVMtu2zAQvOsrCN0ZO4nt1kYUQK84aiWTkGSg6UVQaNphK5EBKRmuv76UbCU2EKA5tEgP2gsf\
+O1ju7ixnITgs8590zQoKxHPFBFczQ1WSkSqTNV8xmW2pZOtflnlpGnqrNMQyhxfT4dg0DBdFeAbM\
+Qa3k4JHxwYYQ0BhU1coi02mzLScjAAmAonvgQgDoJdh39bLwfGc5BzAoVpSIVaYkGTCu0cHuajJq\
+jifbAd1VMlenN0SUpeDHeJm9TFGWLDGO/STJEPYXET7zOQ+pj2LPj63h7vLqejSefPqsU9wAiK51\
+prkkTxbPK7alAK65gDVX+ZpqR/UEm+xLts/bGsDBX0lKYSHEM9xSUgnJ9hS8GvTmfjTWSzRGOLM9\
+r3n2TttQW3eNA/cY7NB2mBcsV4xv2gBt6iHWLQQ3StSS0FvTcGfAda0/dv0ARM4XhFPLPKPANDRt\
+Ll7ehfY80b5zOlqv4y/c+6wDfCA/poFmQJcQRMF3X6fyN8lqY/vf0tjO3JMn3mCj7ckBiVGc2k4Q\
+BulD17qWItMIg8XX93wHAPegrHVL16p1/5P5e3OmbsTjD41Utw2gKF/BL6MBQDs3ofeeAUMN0O2G\
+5KWo/4UyXUdkp/dZGDhNfkV5LA0tmw9x8ht6IeuFrBeyXsh6IeuFrBeyXsh6IftoIfsNDkJykA==
+exehash=1fef78dd83ea0bb8b334609c44d674dde529ca7ea4c323a3059765815c618d06
+
+544.nab_r=base=gem5-m64:
+# Last updated 2019-02-28 16:47:27
+opthash=ceef82fb5e44740ec17c7a36bfb4d8e14675672e6a8a916217d5f982d72e8cdd
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2YlmBJG7KjB5SwnQ6k5YMpe0jI0uLEdiSqwuYfn0lc7EhmfbFHu3ZPdrL\
+WUWj0fznePr9y+TbfPIy879h74cRMo8yJwqLhIxMBcwkvdHk+Xk8ms0/j0YEO6NxJiTOGTsBz7PJ\
+/Nf08eVlPN07FCILDrh+SOfpHSqEdDXKpcMpLqxCW02rCnRvRnUOdhhduvVGSi5E7jTwaCvschgl\
+CTaaYXa0R2gTIRQwVK3zDWgjlCRXT5AJKqM0uU1uUP/hmkP20fWvjq6Z87EFWYgChhg3mZol1YC5\
+YiFflOLp+PHp6zj55HLjo0DSrABUUJk7moMhLKacxuz6Ol7RDY1zFfN4obTVVMYqW7HwQR72sZWG\
+haibfjQnlWtaIuMWwYrSju3gedkF1CbQZMk7CQm5Bo3CoDgSAfAdhxoYF/o0gUPVyoVZssJx4Mi3\
+20JtWya71EC5IZUyot7zXHAcHGVhjm00O6OVsgS3KCsUowUQn3Y3y8xYzuoa+Tm4/C3AihLIDk7U\
+HBbUefG1HjQTRMK2DQ6dcVL8doB8s4GFYrgwDbax+x9osdid3VdWdXuuCpd7eZ/Ox1srAZ0aLZTo\
+z74HR/5Mq63xjb8kCGJAdGtJbtedTO0aMSq0OpI2bkvlSz5tyWpT4sbcT+69ZnO2QimiJU/v8CrI\
+/OyGEHri2pQoTAF1x/UPum7ciupXYQjqygvZ/CecarYMsb7vSu/IGQbe3VOTzmIFMgysEJWBgCce\
+P7rbZvsvOn0oN+ySv55QZ1VrLf2QRMjgLJvbARHpQ3qyecGUbVJNjOf2IjCWlLeD2INxWd8OLnjb\
+jUHWSS9lkF5GrKPxJbC1fx+JhgKoCZNoFvDV4npgqfxlb9j3Nb9CerNmDaNScSiGUbOMPf8gRYeX\
+bf+iRYOb/oeb+34avXv7oXsf9f4CIjn7tQ==
+compile_options=\
+@eNq1Ustu2zAQvOsrCN4Zu2hSwEYUQA/aUSuJhB5A2oug0LTNVhINUjaSfH1Xst0kp+YQ74WL3QF3\
+dnZS3ZG2/iPXqpFI73qlOzt3bG+U6Cuz71bKVAdp1PrZxV+wA6kFiIunV7PpNXacgCV8jvBkb83k\
+UXWTjRBoCGL7lStmsyFtv10jIhDR5wFXGpEw5zSAJw2pXy4RiexOClN3K0iN3MgnUje7bf0GEaaM\
+02wRR/6YZzQsA3r6qPLKglV5yXlG87wCYJpwGL1BhH0FBrURW7ere3WQiKw7TfadrdcSGv2WDKxa\
+9VKP3NCx3xspSaP1jhyk6LVRLxK9BgmXNLmBJ7lhvPLCMHOnTwuIKcS5zKPgBB4ZxhxkQLdW742Q\
+d9gJ5igI3P8qdwQy/zvjhYvfyYgdkD7g5SL2ljn03ks6dn2aBvfVGXABjbHD5gioRUn0i8KIzxR8\
+3IA+FJlXcZYVnh/FUfHzvOgoKHbiKP3xEQMei5fxw61+/A1VezeMaNpXm/w7FULjHePwIwe/pKJA\
+IvGK+wouPDiiaU+8WDm46421/gLGhzpa
+exehash=67eb8b69664c45e36f37e00f07d0434b306a87e2447359a8418fce0fad6989a3
+
+557.xz_r=base=gem5-m64:
+# Last updated 2019-02-28 16:50:37
+opthash=e0200515b8542399e21cfa791dd167f840525a03ef7e35fc3c8b723f0cc59057
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2YlmBJG7KjB5SwnQ6k5YMpe0jI0uLEdiSqwuYfn0lc7EhmfbFHu3ZPdrL\
+WUWj0fznePr9y+TbfPIy879h74cRMo8yJwqLhIxMBcwkvdHk+Xk8ms0/j0YEO6NxJiTOGTsBz7PJ\
+/Nf08eVlPN07FCILDrh+SOfpHSqEdDXKpcMpLqxCW02rCnRvRnUOdhhduvVGSi5E7jTwaCvschgl\
+CTaaYXa0R2gTIRQwVK3zDWgjlCRXT5AJKqM0uU1uUP/hmkP20fWvjq6Z87EFWYgChhg3mZol1YC5\
+YiFflOLp+PHp6zj55HLjo0DSrABUUJk7moMhLKacxuz6Ol7RDY1zFfN4obTVVMYqW7HwQR72sZWG\
+haibfjQnlWtaIuMWwYrSju3gedkF1CbQZMk7CQm5Bo3CoDgSAfAdhxoYF/o0gUPVyoVZssJx4Mi3\
+20JtWya71EC5IZUyot7zXHAcHGVhjm00O6OVsgS3KCsUowUQn3Y3y8xYzuoa+Tm4/C3AihLIDk7U\
+HBbUefG1HjQTRMK2DQ6dcVL8doB8s4GFYrgwDbax+x9osdid3VdWdXuuCpd7eZ/Ox1srAZ0aLZTo\
+z74HR/5Mq63xjb8kCGJAdGtJbtedTO0aMSq0OpI2bkvlSz5tyWpT4sbcT+69ZnO2QimiJU/v8CrI\
+/OyGEHri2pQoTAF1x/UPum7ciupXYQjqygvZ/CecarYMsb7vSu/IGQbe3VOTzmIFMgysEJWBgCce\
+P7rbZvsvOn0oN+ySv55QZ1VrLf2QRMjgLJvbARHpQ3qyecGUbVJNjOf2IjCWlLeD2INxWd8OLnjb\
+jUHWSS9lkF5GrKPxJbC1fx+JhgKoCZNoFvDV4npgqfxlb9j3Nb9CerNmDaNScSiGUbOMPf8gRYeX\
+bf+iRYOb/oeb+34avXv7oXsf9f4CIjn7tQ==
+compile_options=\
+@eNrtVN9v2jAQfs9fYeXd/GgLG6ipFBID2UhsQZjavljBGPCaxMgOqOOvnxMKBK3S+rBJe9hJyfl8\
+X87yd98lkjnMkhe+EikHclsImeu+pQslWEHVLl8KRfdcidUPx27blllqA3HsVqPX6tqW5eGQ9IHd\
+3GnVXIi8uWYMlAZ1sXRYr1cus+4dgAxAeTqgIQH0ZwR5xkU+GsxHbzF15zGmg6cY4amPpk7rtX1z\
+e9fpfvpsAGP3G6IejobBiI6d9umTEIU0wKfo8fmq1GxOyBTNZhQTFIUEwKBhHr3ljGY8o0KW0SaB\
+N8YzmWUyN4tULNJDljSTrahF5asW/oJmG85earEW2dZwetlY8rRIrgrWApXka87kkitD2BpAfGt4\
+SxTbOHlSiL2ps8ol3OU6WXGTKDaw5DITh6RiFBzzheIcplJu4Z6zQipx4OBi0B+hsGNc2MGEur5f\
+Ejw01jJ22iaB91bsKAKYpCLRIl9XBSpmJ8Q0FNxruVOMP9iW1wee5/xWA0cgHnzBJHbsK0HYlhGR\
+R+bDiTuamdy1OKrsAEXemF4B/quFK9vCfWAIDcLgGRli/qR0qtroMZ66hsjLEe9oo+rQEUnwNHYH\
+wSSIn859KgVjW5Mg+vqRXwWAB5Dt0iVf6Sr9V6bhXYXfy8V3g9QPoD41Z5UCUEl44n9E67gEeie9\
+nm/0r/Srugeel4NYm8KfaA3jwQ==
+exehash=1b858b5ad279aad81acc526eed7bf19138d4585ad59645e0047e0d792beb73ab
+
+554.roms_r=base=gem5-m64:
+# Last updated 2019-03-01 10:14:22
+opthash=4aaffe05b2d33fdd5bb0de35bef8d73b1b334883a9f6857e4e40121f44edd003
+baggage=
+compiler_version=\
+@eNqFVE1z2jAQvfMrfEs7saxAGjdlxoeU0E5n0pKhtD0ysrQIgS25+gDTX1/JfNiQTHuxR/t2n3bf\
+7ir6NJr/HE+/f5l8m0+eZ/437P0wQvIod6KwSMjIVEBN0htNnp7Go9n882iUYWc0zoXEfKG01USe\
+0KfZZP5r+vD8PJ7uvQqRY04pru/TefoOFUK6GnHpcIoLq9BWk6oC3ZsRzcEOo0u33kjJheBOA4u2\
+wi6HUZJgoymmR3uENhFCAUPVmm9AG6FkdvUIuSAySpPb5Ab1768Z5B9c/+romjsfW2QLUcAQ4yZT\
+syQaMFM05ItSPB0/PH4dJx8dNz4KJMkLQAWR3BEOJqMxYSSm19fximxIzFXM4oMascpXNHyQh31s\
+pWEh6kaP5qS4JiUybhGsKO3YDp6XKqA2gSZL1klIyDVoFLrFkAiAVxxqoEzoUwcOVSsXGkoLx4Ah\
+L7eF2rZMdqmBMJNVyoh6z3PBcXCUhTnKaHZGK2Uz3KK0UJQUkPm0u1nmxjJa18j3wfHXACtKyHZw\
+omawIM5PYOtBcpFJ2LbBQRknxW8HyIsNNBTDhGmwjd3/QIvF7uy+sqrbc1U47mf8dD7eWgno1Gih\
+RH/2Ghz5c622xgt/SRCGAZGtzbhddzK1a0SJ0OpI2rgtlS/5tCWrTYkbcz+58zPL6QqliJQsfYdX\
+YczPbgihJ65NiUIXULdd/6Drxq2IfhGGoK78IJv/hBNNlyHW6670LjvDwLt76qyzWIEMAy1EZSDg\
+iceP7rbZ/gulD+WGXfLXZ8RZ1VpL3yQRMjjL5naQifQ+Pdn8wJRtUk2M5/ZDYGxW3g5iD8ZlfTu4\
+4G03Blkn/SiD9GNEOzO+BLr2j2SmoQBiQieaBXyxuB5YKn/ZK/Z9zS+Q3qxZw6hUDIph1Cxjzz9I\
+0eFl279o0eCm//7mrp9Gb15/6N5Gvb/6VP3u
+compile_options=\
+@eNrFUltvmzAUfudXWH43abVuUqNSiRCHsQK2AkjtXhAlJvUGNrKdbOuvn4EmzR6qRdOm8eLjc/H5\
+LqRSoK76yhreMiB7w6XQc0cbxWtTqp3YcFXumeLNDw9eQseG2rZ48MK9vriCjrOidA6g7lnd9wAt\
+Q5y8t0dGcWCPdIkXRQjQN4A60HLDVNUizcW2ZW7fDcka1bLrmDDjPXLt0AKnwcfEX98NDzBt2CZU\
+fKO9y+FOyhDneZRgslr6Dy+bSr/ISZkVlK5xlpWE4jShh1pMP1yBGy13qma3AMlj7DZ9z5/Zxm2u\
+v0OHzIGlsor9MPPgxAM6llpAi2PyF1ZjdcRangz+D6YjEnyfr/2SknXuL6I4yh8OgEcBoBOQZDBq\
+ttNq9sjFbNtIZVQlwOuHOqsUqgeNXn4EV05ItwCRd7ZeqfrJE5XhewZQIyTaCV01zBbMExpmOv5c\
+jZNT2SjGUCtlj/asNlJZuY/yW0hW8sD7LaSpkSw+EZpbUqf4znfo0BG5o9X2qSiJPmOb+QNub5I7\
+y4k4Su/OcWKK/ia81wU38vGLzepbcLr1qCsAo+jx8hx3/qWcIwhSDL6fmP4TxK1rtA==
+exehash=84265200194772d385c4c17f3d78743902a030225c58695b8e47f3b4e774b5de
+
+548.exchange2_r=base=gem5-m64:
+# Last updated 2019-03-01 12:50:29
+opthash=3f2f9b0ec1b6f3cf02f6977b1d8439edc2889f3d22699e955a261aacd6e4d72b
+baggage=
+compiler_version=\
+@eNqFVE1z2jAQvfMrfEs7saxAGjdlxoeU0E5n0pKhtD0ysrQIgS25+gDTX1/JfNiQTHuxR/t2n3bf\
+7ir6NJr/HE+/f5l8m0+eZ/437P0wQvIod6KwSMjIVEBN0htNnp7Go9n882iUYWc0zoXEfKG01USe\
+0KfZZP5r+vD8PJ7uvQqRY04pru/TefoOFUK6GnHpcIoLq9BWk6oC3ZsRzcEOo0u33kjJheBOA4u2\
+wi6HUZJgoymmR3uENhFCAUPVmm9AG6FkdvUIuSAySpPb5Ab1768Z5B9c/+romjsfW2QLUcAQ4yZT\
+syQaMFM05ItSPB0/PH4dJx8dNz4KJMkLQAWR3BEOJqMxYSSm19fximxIzFXM4oMascpXNHyQh31s\
+pWEh6kaP5qS4JiUybhGsKO3YDp6XKqA2gSZL1klIyDVoFLrFkAiAVxxqoEzoUwcOVSsXGkoLx4Ah\
+L7eF2rZMdqmBMJNVyoh6z3PBcXCUhTnKaHZGK2Uz3KK0UJQUkPm0u1nmxjJa18j3wfHXACtKyHZw\
+omawIM5PYOtBcpFJ2LbBQRknxW8HyIsNNBTDhGmwjd3/QIvF7uy+sqrbc1U47mf8dD7eWgno1Gih\
+RH/2Ghz5c622xgt/SRCGAZGtzbhddzK1a0SJ0OpI2rgtlS/5tCWrTYkbcz+58zPL6QqliJQsfYdX\
+YczPbgihJ65NiUIXULdd/6Drxq2IfhGGoK78IJv/hBNNlyHW6670LjvDwLt76qyzWIEMAy1EZSDg\
+iceP7rbZ/gulD+WGXfLXZ8RZ1VpL3yQRMjjL5naQifQ+Pdn8wJRtUk2M5/ZDYGxW3g5iD8ZlfTu4\
+4G03Blkn/SiD9GNEOzO+BLr2j2SmoQBiQieaBXyxuB5YKn/ZK/Z9zS+Q3qxZw6hUDIph1Cxjzz9I\
+0eFl279o0eCm//7mrp9Gb15/6N5Gvb/6VP3u
+compile_options=\
+@eNq1Ul1vgjAUfedXNH2vbtlcohETRHRsSBuBZNsLQSzaTSkpaDZ//S7oUJMtM4vrS297T3M+bl2Z\
+klX0xhOx5EhmhZBp3tHyQom4CNU6nQkVbrgSyYeOr7EGZQ4QHV812lctrGlDxjoI5xmPswyRwcga\
+t2DzmGXC5g6sfjDan0Mj8GnoBYxNLM8LKbPcMfvqOezuFnVzuVYx7yEi67qRZJnY8lkjab9jjXYQ\
+EA4dY+TpeMeGNRBgsqC+POGuun3LNe/DE8C3Yiqw9eRPjJDRiW/0bcf2n+snpUasmXRcOm6uc9Wc\
+irQ5T6QqVJSiwyIrMEPi0sY+0YZEZI4IvYFepOKFnkaF2HBEklSSdZpHCYdGsSAlfiW2UfVq1y4U\
+52QpZUY2PC6kgjTqdEAOJGLqv8rZAWn/gTIfDB1ru2iAMCBgsMf2iwXIP1j+0fNZw3Fs9/Gc4eyq\
+S8o7EHTl9BVu8x46Zq3jRqiahTM4Z2j/GWclggbldzj6C58o5Dl5
+exehash=5fd085deeacd70d48f66d459842b450afd2747aaaf9ff66aa7fb7abf3bebde25
+
+521.wrf_r=base=gem5-m64:
+# Last updated 2019-03-01 13:36:55
+opthash=f05867b21383fccbe7bea7670d29f2baac1def77262aae2a2125ec695d51b427
+baggage=
+compiler_version=\
+@eNrtVEuP2jAQvvMrfNtWG8cL2023SDlsWVpV2pYVpe0ROc4QDImd+gGhv752eCTAqlVvPXBJ5Plm\
+Po/n8aEPg+n34fjrp9GX6eh54n79Dhqc275pLjKUWJ4bzAXSJTAddgajp6fhYDL9OBjExGpFEi5I\
+NpPKKCoO6NNkNP0xfnh+Ho63XjlPSMYYqe6jafQG51zYCmfCkojkRuK1omUJqjOhKgPTR6dunYEU\
+M55ZBSlaczPvozAkWjHC9naEVwhjj+Fyma1AaS5FfPUICacCReFteIO799cpJO9s92rvmlgXm8cz\
+nkOfkDpTPacKSCqZzxdHZDx8ePw8DN/bTLsoEDTJAedUZJZmoGMW0JQG7Po6WNAVDTIZpMGuGoFM\
+Fsx/sINdbKlgxqu6HvVJZooWWNuZt+KoZdt5nlYBNwnUWaathLhYgsK+WynmHnAVhwpYytWhA7tX\
+S+sbynKbQopduQ1UpmEycwU01XEpNa+2PCccO0eR630Z9UYrKU1MGpTlktEcYpd2O8tEm5RVFXZ9\
+sNlLgOEFxBs4UKcwo9ZNYONBEx4LWDfBvjJW8J8WsCs2MP+YlOsaW5ntDxSfbY7uK8qqOZe5zdyM\
+H877W0sOrTcaKPCvbQ32/ImSa+0Kf0rghwHTtYkzs2xlapaYUa7knrR2m0v35MOWLFYFqc3d8M7N\
+bMYWOMK0SKM3ZOHH/OgGH3rgWhXYdwG32/UHunbcgqqzMAxV6QZZ/yWcKjb3sa7uUm3iIwycu6OO\
+W4vlyQiwnJcaPB46fO9u6u0/qfTuuX6X3PUxtUY21sI1ifsMjrK57cU8uo8ONjcwRZNUHeO43RBo\
+Exe3vcCBQVHd9k54m43Bxgo3yiDcGLHWjM+BLZ1IxgpyoNp3ol7As8V1wFy6y16wb998hnQm9Rqi\
+QqaQ91G9jB0nSGinbFtFQ72b7tubu26EXr0sdK/RP8k4YxcFvyj4RcEvCn5R8P9HwX8Dm+j5sQ==
+compile_options=\
+@eNrtVm1vmzAQ/s6vsPhOQtMkbapSiReTsgG2eNHafUGUQMuWAAKSdf31syEJoaNr1nXaPmApwuc7\
+n8/3PL6cmSbcyv8aRvEyBGlWxmlSXDBFmcdB6eXrZBHn3ibM4+i7wJ6wDJkWxERg+cGMH7MMo2J8\
+AdgiC4MsA5wyh8aEfGwMZfIxFSi5cyo7rmRgbavxRNdBnu1ibEHb9hCGpoEB9w1wK7CMyzD3l4Ns\
+BThtQH/DOAmqbxKWwSKi4nK9CIkvxfCwaIm6DnUiQcOTkQWFE3qwsRX4rWCIN56iGcJoytMlGYkG\
+thsTRWzm8AY3gvYJWYqtfYbCmJrtpXMiWS2d3pJM6MiKSh2YjoaqE01Vm3uSq3o6NIXT0dmU+qji\
+QoaombanCqNd7Ca0nep8qr/WbAdZt8Jo8uv81TodT8fgskjXeRBeAS7dzwdRlsVP4WIQzR5ZBl0A\
+Ap2qi3NbYGvcWIZAKWN3v9hCsdJK0JSvvcbgdVgPtzXn9VD/CdRVTuGNY4keRpYjSpquObc7xCoG\
+sIyMDPoyh+siH97FyfA+SvMy9xPQDG5FqMIFlCTbl0+kLBukezye47CD6B5w6JTs9/PgQUj8Mt4Q\
+ZZSk3Dop/CgkivKBoz5X8ZO/9UzVZR6G3DJNM24TBmWaEz4SRZAmpK6Uwl18z4Wk4pAgd6Ql9yBE\
+lYVX71EbIukDwg7JxE+X+m1yv5KB47hPXhmJRzMoV9i3ZO3FtFURq234OxL5NqoEQZ3XolwIwWzW\
+SRXKkud1/h1y1tJJtw4kTw1aAv94MjodT6Zn5+Bd09hwqD5WFm1YUQA0f2bGBGFPVBQahUoGz1eF\
+pVrGmny4vSq+bfLKLfJ2Z7Y27CTvv+Ht3qvcOvdlVP461eUu+u7ROormumZ+PKYi1rP3Z1lnoSPj\
+Mr37QiyLK3AYSVO+QEUPXTmmCP4HBaeKFbmUyAcs7hvFvlHsG8W+Uewbxb5R7BvFvlHsG8W+Uexs\
+FH8AQrQCnw==
+exehash=ab7063822e674166e58908560244cd9b19c28d6821ed6d6ff5a06d51023c6e34
+
+526.blender_r=base=gem5-m64:
+# Last updated 2019-03-05 09:49:31
+opthash=16784a83d6729a43e0df8663b26324ac0164c166bb4d34758a06cd7f61aa2d60
+baggage=
+compiler_version=\
+@eNrtVEuP2jAQvvMrcttWxPHC7qZbpBy2WVRV2pYVpe3ekOMMwZDYqR8Q+utrh0cCrFr11gOXRJ5v\
+5vN4Hp8Xv7zE0+/D8ddPoy/T0fPE/gYdLz63fVOMZ15iWK4R454qgaqgE4+enobxZPoxjiNslMQJ\
+4zjrdg/A02Q0/TF+eH4ejrcOOUtwRimu7sNpeItyxk2FMm5wiHMt0FqSsgTZmRCZgR54p26dWPAZ\
+y4yE1FszPR94QYCVpJju7R5aeQg5DJXLbAVSMcGjq0dIGOFeGNwE16h3300heW96V3vXxNjYPJqx\
+HAYY15mqOZGAU0FdvijE4+HD4+dh8MFkykYBJ0kOKCc8MyQDFVGfpMSn3a6/ICviZ8JP/ZmQWhLu\
+i2RB3QdZ2MaWEmasqutRn0QmSYGUmTkrClu2nedpFVCTQJ1l2kqI8SVI5BqVIuYAW3GogKZMHjqw\
+e7Uwrpc0NymkyJZbQ6UbJj2XQFIVlUKxastzwrFz5Lnal1FtlBRCR7hBaS4oySGyabezTJROaVUh\
+2weTvQZoVkC0gQN1CjNi7PA1HiRhEYd1E+wqYzj7aQDZYgN1j0mZqrGV3v5Astnm6L6irJpzmZvM\
+jvfhvL+1ZNB6o4YC/drWYM+fSLFWtvCnBG4YEFnrKNPLVqZ6iShhUuxJa7e5sE8+bMliVeDa3Avu\
+7MxmdIFCRIo0vMULN+ZHN7jQA9eqQK4LqN2uP9C14xZEnoUhqEo7yOov4UTSuYu1dRdyEx1hYN0t\
+ddRaLEeGgeasVODwwOJ7d11v/0mld891u2Svj4jRorEWtknMZXCUzU0/YuF9eLDZgSmapOoYy22H\
+QOmouOn7FvSL6qZ/wttsDNKG21EGbseItmZ8DnRp9TGSkANRrhP1Ap4trgXmwl72in375jOkM6nX\
+0CtECvnAq5exYwXJ2ynbVtG8/nXv3fVdL/TevC50b71/UnBKLwp+UfCLgl8U/KLg/4+C/wbq3/e4
+compile_options=\
+@eNrtnF1z2jgUhu/5FR5uO5R0m3a3mdIZAi6wS8DDxzbdG4+wBWixLVeSSdJfv8emJCHEWJ3Jzuzs\
+vNyAdV4dy7Ykn/OM0EgmjZht+FJE3JGpETLRFzVtlAiMr7IkFMrfciWWd636m3qNfmqStOpnrz+c\
+nddrtc74yrtw6s1Mq+ZCJM3Vq1fOk08jfn/uNAKnIfcneC2dRnfquR36GnXdy3nPaQx0ygPFkpB+\
+LiKehFw1+a3hKsn9Kh7JoCmSIMpCfqwIZMTisDkos68iflNeOxKLeFtSTLXyg2MrNXXFjeLP+LsJ\
+bkRo1o8MR052BU1mZCyCZ8qzkOmUBby0ZnAXRFw3f5Qe23m04Dz+0aJj82ottSkpLj1nfhcb8W2p\
+obxixlTIQxbRQzxtLXUhNlpG2/t7fCygyizix+UxjzMjomcMYrMxxU0+tsmUJ9SnpBLy2KiY3pjn\
+7rmO5YaXNjAfU8nquDwzy0Amj/uflpmiR78/zL+XMjHViuO794xwQwoe2Wis3NEoqRTYOZLssCeX\
+aqrdxVyvK8x2TppGykiXi6iTRCxkpwRxKrUw8sSV8TC36yZLRMzyCdJCqkiZKV6tDDK1tZCt8h4v\
+omrh8SxaKqT7uzwcXmVSWa2JadRZqE4++AeVYQuab6qVcvE3D0y1Ll3faRHoaqF6Ol+X6HRAr5bE\
+RpdFqfFTJhKLZlLxwQu2TJbPij4L7PriTr3IjKFXu608iERqrSW/MuK28iKUsdSuFEvXtmIanStr\
+z4JmZFttJFcHUcBJcRIxa6kMrdsrMxOJxKprFnrqoCI11mr+LaMJxt69odeotVbE1peZaa5SxZe2\
++q3gN28thoyheFAvpYqrpU/CkTLVNv9Vrlul2Ulj5ftNbNIoWwkLRbWreJEtK8x2Th4HYPz2RG/J\
+cxYdJqxCoWwUlU2LZSiWglIfC0mls3xQ6grzfdjAq4RWZ2vq9enYaqfKx9zJmCK9M+tTbwR1kAZV\
+RgrqMML/OblidzTmTkUXNyIJ5U3MEpq1n7n2FYvpDUvdmzcvd5YJzYF0+Ojh+HlKW9lrHlpOsW5a\
+xPjfi7C4yHH99nw29qdzz5u406k/9tzRlXdgu/w6c8eTrjtpnd2++eXt+bv3v/5Ggt7Q/eKPxr47\
+3R9MZ+3ZIE+avwxmfb87avu9fnva3xf0hr43GX8eDF0/T8vbs72h77a7Qzo5Hffbf7r+fDQd9EZu\
+1+/02xNK0KnF47eUpzMVrFsJhaB5xLhMZCNLNFtyMph1I8/dY/G9CFC1s7Pn+W8jkjJtbClMonTp\
+Oy8y/iVVFKuEh41gzdT+YoeD0fw6N3d77tU7+rp6N/b8drebX/hn+pzRZ1/s0YU69zW99+eO83H3\
+JD7Va50Lp3N93arEDnvl+PL3sTdr1Q8oRL3mkdGbfx62e1OyHRKJwnrpjjp9fy8AogCiAKIAogCi\
+AKIAogCiAKIAogCiAKIAogCiAKL4FxFFvTa+cCiBH1wN/nIpEX9JXlHk+d54MmtfDoaD2Vdyf4Je\
+FGr3ejZp+4d1HjhF/XhNRBDsiIQ2YSv48AFrIgAcABwAHAAcABwAHAAcABwAHAAcABwAHAAcABz+\
+p2siXnZdxMmVEZ1WJXvYCbEsApQClAKUApQClAKUApQClAKUApQClAKUApQClALLIl52WQQp/7DZ\
+KmL368X5SwV8cZyPu5BRfzpo0T0XcZwCmgy7Nn87+e88mKLJ43lOeR4hHuzbAfoD+gP6A/oD+gP6\
+A/oD+gP6A/oD+gP6A/oD+oN9O7BvBxAFEAUQBRAFEAUQBRAFEAUQBRAFEAUQBRAFEAUQBfbtwJoI\
+AAcABwAHAAcABwAHAAcABwAHAAcABwAHAAcAB+zbgX07QClAKUApQClAKUApQClAKUApQClAKUAp\
+QClAKbAsAvt2YN+On9+34x+Abqwm
+exehash=1cdc2f8216cace7ab0b4e15c6157b0fc2c92c42fb1fa8a2504e103931661b61a
+
+523.xalancbmk_r=base=gem5-m64:
+# Last updated 2019-03-05 12:58:45
+opthash=67ef4d3303a376624178cdcbffaaf3cbedf755ff4f1da9a01f37a15294ac760e
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2sFAgiZsy44eUMJ3OpCVDaZs3RpYWIbAlVxcw/fpK5mJDMu2LPdqze7SX\
+s4pGLy+j+c/x9PuXybf55Hnmf8PODyMkjzIncouEjEwJ1PQ6o8nT03g0m38ejVLsjMaZkJh3uyfg\
+aTaZ/5o+PD+Pp3uHXGSYU4qr+2Se3KJcSFchLh1OcG4V2mpSlqA7M6I52GF06dYZKbkQ3Glg0VbY\
+5TDq9bDRFNOjPUKbCKGAoXLNN6CNUDK9eoRMEBklvZveNerfdxlkH13/6uiaOR+bpwuRwxDjOlOz\
+JBowUzTkixI8HT88fh33PjlufBRIkuWAciK5IxxMSmPCSEy73XhFNiTmKmbxQmmriYxVtqLhgzzs\
+Y0sNC1HV/ahPimtSIOMWwYqSlu3gedkF1CRQZ8laCQm5Bo3CoBgSAfAdhwooE/o0gUPVyoVZ0twx\
+YMi320JlGya71ECYSUtlRLXnueA4OMrcHNtodkYrZVPcoDRXlOSQ+rTbWWbGMlpVyM/B8bcAKwpI\
+d3CiZrAgzouv8SCZSCVsm+DQGSfFbwfINxtoKIYJU2Mbu/+BFovd2X1FWTXnMnfcy/t0Pt5aCmjV\
+aKFAf/Y9OPJnWm2Nb/wlQRADIlubcrtuZWrXiBKh1ZG0dlsqX/JpS1abAtfmfu/Oa5bTFUoQKVhy\
+i1dB5mc3hNAT16ZAYQqoPa5/0LXjVkS/CkNQlV7I5j/hRNNliPV9V3qXnmHg3T112lqsQIaB5qI0\
+EPCex4/utt7+i04fyg275K9PibOqsRZ+SCJkcJbNzSAVyX1ysnnBFE1SdYzn9iIwNi1uBrEH46K6\
+GVzwNhuDrJNeyiC9jGhL40uga/8+phpyICZMol7AV4vrgaXyl71h39f8CunM6jWMCsUgH0b1Mnb8\
+gxQdXrb9ixYNrvsfru/6SfTu7YfufdT5C7Rw+/U=
+compile_options=\
+@eNrtVN9vmzAQfuevsHitCNnWTFo0KjngpnSALX5MbC8WJST1BnbEjyjtX98LiCyJJq0PnfYyS4i7\
++z7bx913BEoaVfazWIuyQGrbCiWbuda0tchbXndyJWq+K2qxfrL0d7oGZgMUS59OPk1nuqbZ1Gdz\
+pJtdU5sPQpqbqyt0sYzq4zUycmSo8YKJQoYTMWLDK3DIIlkCy8GM8YDy+C4k2IkgkGIPB9wNfOJz\
+P1pyj2KHhMhwJ/DsizovmvyXZa5Ude6ZotqWJ6Em2594XStK0282nspW8FWmK/2iUvXTJSWuM9nk\
+auDkSu4OhKzMZG4KmZfdqoBUWUjveep7DIfRIcVjIIldb3QHMBrdCKfX9onzfrQd6o/mV+y5Do5p\
+vwuO40lExoqQKMJLMhalryfHSUx5lDAWAsopI4HPkLFBBv0Afcjq/NGSWSt2kPNaKqOTTbYuAGgf\
+jUNvKvGc9R1CA97WRWGUSm2NXZG3qhbPRd/R4TLPDZK0d5fEn8HLn1HGseOE1nR/C2sKawwz1z7Z\
+yUAS6HOjOij0ja7Zc2SnqfVHGY1MurinLLb0M1XpGijRZsmth5cRYOcK69EFCew7DgccOf9F93dE\
+p2t0jqBHru9+J1Dot5Rg30pGwxgvXM+Nv429HgTZoySNQ8x/y2EHGQHzy2t+W4P11vNzOUAwCurh\
+BzCam7MMjtJGqFe+57xmRP5d4fsUaXIYzJOpfAGLpO5k
+exehash=445e4213074429d541497bebbaa0751011ce47c335892137b12b8e51135c40b7
+
+538.imagick_r=base=gem5-m64:
+# Last updated 2019-03-05 16:58:41
+opthash=a2afa64cb67115b2b58005b9da18b4ee0e54ae3a4974d527dfdf36dcdaa74b02
+baggage=
+compiler_version=\
+@eNqFVNty2jAQfecr/JZ2YlmBJG7KjB5SwnQ6k5YMpe0jI0uLEdiSqwuYfn0lc7EhmfbFHu3ZPdrL\
+WUWj0fznePr9y+TbfPIy879h74cRMo8yJwqLhIxMBcwkvdHk+Xk8ms0/j0YEO6NxJiTOGTsBz7PJ\
+/Nf08eVlPN07FCILDrh+SOfpHSqEdDXKpcMpLqxCW02rCnRvRnUOdhhduvVGSi5E7jTwaCvschgl\
+CTaaYXa0R2gTIRQwVK3zDWgjlCRXT5AJKqM0uU1uUP/hmkP20fWvjq6Z87EFWYgChhg3mZol1YC5\
+YiFflOLp+PHp6zj55HLjo0DSrABUUJk7moMhLKacxuz6Ol7RDY1zFfN4obTVVMYqW7HwQR72sZWG\
+haibfjQnlWtaIuMWwYrSju3gedkF1CbQZMk7CQm5Bo3CoDgSAfAdhxoYF/o0gUPVyoVZssJx4Mi3\
+20JtWya71EC5IZUyot7zXHAcHGVhjm00O6OVsgS3KCsUowUQn3Y3y8xYzuoa+Tm4/C3AihLIDk7U\
+HBbUefG1HjQTRMK2DQ6dcVL8doB8s4GFYrgwDbax+x9osdid3VdWdXuuCpd7eZ/Ox1srAZ0aLZTo\
+z74HR/5Mq63xjb8kCGJAdGtJbtedTO0aMSq0OpI2bkvlSz5tyWpT4sbcT+69ZnO2QimiJU/v8CrI\
+/OyGEHri2pQoTAF1x/UPum7ciupXYQjqygvZ/CecarYMsb7vSu/IGQbe3VOTzmIFMgysEJWBgCce\
+P7rbZvsvOn0oN+ySv55QZ1VrLf2QRMjgLJvbARHpQ3qyecGUbVJNjOf2IjCWlLeD2INxWd8OLnjb\
+jUHWSS9lkF5GrKPxJbC1fx+JhgKoCZNoFvDV4npgqfxlb9j3Nb9CerNmDaNScSiGUbOMPf8gRYeX\
+bf+iRYOb/oeb+34avXv7oXsf9f4CIjn7tQ==
+compile_options=\
+@eNrtU8tuwjAQvOcrLN8NVIVKoAYpLyBtElskkdperBAMuCUxcgJq+fo6AUq5tBxKT+zF1u7IM57d\
+DUSOsuSNzfiSAbEquciLnlaUkqcllet8yiXdMMlnHzq8gZq6Fgqiw1aj22pDTbOwT3oANteFbE54\
+3pynKagCFeVUT7vd6prdtQFKARIHgoYAyA6JY6kjsB0zHgLkNvY5asQRpmFMyNgJQ4qJE/hEvTIH\
+CN+qxxKZLvQ8KfmGATTLBVrnRTJjqlAuUEWQ8W1S04BdvZSMoaUQK7RhaSkk3zJwDGQPHb+jDr+D\
+CTVse6y33gcqWioOaeJae3Ct0CPqR+C+EGuZsj7UrB6wLP1XE3ZAbD5gEunwxBGoKRctEg88Yxiq\
+2qk7ddV0AmtED4Cf7YIa7gHF4vrui6PQf+ldLcZ5isYGJXgcGabrudHzQXPtDdQ8N3g8Zyx2ycu0\
+9l5MXlW26FcUy+zY8S/XAahb4tnn9O6SjioRvhGNqOeaVXOX2V4XjqtB+TYl13277tt13/5v3z4B\
+eLAdVQ==
+exehash=5bbb3bc3d026fdcd0f4bf8089e6959393ee175a7813891666aa05f7a507ef26b
+
+527.cam4_r=base=gem5-m64:
+# Last updated 2019-03-06 09:11:14
+opthash=ff5e11852535f88617dd03063c93bc624dbf49c0a072bb9e4121a9dd04808ddd
+baggage=
+compiler_version=\
+@eNrtVEuP2jAQvvMrfNtWG8cL2023SDlsWVpV2pYVpe0ROc4QDImd+gGhv752eCTAqlVvPXBJ5Plm\
+Po/n8aEPg+n34fjrp9GX6eh54n79Dhqc275pLjKUWJ4bzAXSJTAddgajp6fhYDL9OBjExGpFEi5I\
+NpPKKCoO6NNkNP0xfnh+Ho63XjlPSMYYqe6jafQG51zYCmfCkojkRuK1omUJqjOhKgPTR6dunYEU\
+M55ZBSlaczPvozAkWjHC9naEVwhjj+Fyma1AaS5FfPUICacCReFteIO799cpJO9s92rvmlgXm8cz\
+nkOfkDpTPacKSCqZzxdHZDx8ePw8DN/bTLsoEDTJAedUZJZmoGMW0JQG7Po6WNAVDTIZpMGuGoFM\
+Fsx/sINdbKlgxqu6HvVJZooWWNuZt+KoZdt5nlYBNwnUWaathLhYgsK+WynmHnAVhwpYytWhA7tX\
+S+sbynKbQopduQ1UpmEycwU01XEpNa+2PCccO0eR630Z9UYrKU1MGpTlktEcYpd2O8tEm5RVFXZ9\
+sNlLgOEFxBs4UKcwo9ZNYONBEx4LWDfBvjJW8J8WsCs2MP+YlOsaW5ntDxSfbY7uK8qqOZe5zdyM\
+H877W0sOrTcaKPCvbQ32/ImSa+0Kf0rghwHTtYkzs2xlapaYUa7knrR2m0v35MOWLFYFqc3d8M7N\
+bMYWOMK0SKM3ZOHH/OgGH3rgWhXYdwG32/UHunbcgqqzMAxV6QZZ/yWcKjb3sa7uUm3iIwycu6OO\
+W4vlyQiwnJcaPB46fO9u6u0/qfTuuX6X3PUxtUY21sI1ifsMjrK57cU8uo8ONjcwRZNUHeO43RBo\
+Exe3vcCBQVHd9k54m43Bxgo3yiDcGLHWjM+BLZ1IxgpyoNp3ol7As8V1wFy6y16wb998hnQm9Rqi\
+QqaQ91G9jB0nSGinbFtFQ72b7tubu26EXr0sdK/RP8k4YxcFvyj4RcEvCn5R8P9HwX8Dm+j5sQ==
+compile_options=\
+@eNrtVW1vmzAQ/s6vsPhO3ppkSzRXIuAkrIAtINW6Lygl0LIlgIBkXX/9DlPy0mVLNnWa1oEU+bF9\
+vtzLc3dmHEmr+Wc/CJc+ipM8jKNsKGR5Gnq5m66jRZi6Gz8Ng69YbIsCwAxEsNhqDFp9URDGjA2R\
+mCW+lyRIUifE6MFiM6LAYqpkNJsUgLr21HKvDdmZwlahHRkWRqyJRQugUxO3u10OZQcP+hyRa9zh\
+SDFtB19wRHUbcznHMnC7BGYFrjiwHXkyIRZRAbsmcRR1XJpgtUGb1oBfGHnL9cIHFPm5twia2wNu\
+uivPHLB4xphFbNuljJgGQ9IXuJ5qKnENphW6YbGJpcl6qR62nUqBItvEHevypDrQWb+L3mXxOvX8\
+SyTFW9wIkiR89BeNYPAgCnSIIKLFQxuLZThFASKssNn28CC4/HZETGXq7j/8bwLO/WfUcuSRpmvO\
+TRWgXQa4BPngWLJ7TK5IjCgo1Ch43FxnafM2jJp3QZzm6TxCu09aQQYlr8jdU53ALkka8UkX75BE\
+IZireerd42iehxs4DKJYWkfZPPDhIr+XCp2r8HH+pLm4zlPfl5ZxnEgb38vjFGiypQ2YDFRR8EmT\
+S0E6ek+ZA05/Z//59KokfuotpzD8lWZoHwkI/4bvP3T+T+Xa88poZfkCe4PB0VwXaX7W1l5NX9u7\
+G904hFoqsXDrod256Pb6b96iF03ilpvPGyXajQ+jR5krq2phxRi+FnzVMdOU/fe8rx5WhXJQFceT\
+WwoerYqzC0J5Zd32BA3+gcrWNfPqnC5eohdn9RFKAzXj208glV2ifSt2PRhxKurqOZ387yaAm0ln\
+Rb3sFUs9OuvRWY/OenTWo7MenfXo/KXR+Q2YeRG3
+exehash=5b030ff5e3484f8fbca0cdf61c3e63a5e82ec43d1a3caaa30fe3f89a8322c408
+
+549.fotonik3d_r=base=gem5-m64:
+# Last updated 2019-03-06 09:14:08
+opthash=e125a22c61997a6f5eca1caee79f76ad70b297c71a0006d363364d040332b654
+baggage=
+compiler_version=\
+@eNqFVE1z2jAQvfMrfEs7saxAGjdlxoeU0E5n0pKhtD0ysrQIgS25+gDTX1/JfNiQTHuxR/t2n3bf\
+7ir6NJr/HE+/f5l8m0+eZ/437P0wQvIod6KwSMjIVEBN0htNnp7Go9n882iUYWc0zoXEfKG01USe\
+0KfZZP5r+vD8PJ7uvQqRY04pru/TefoOFUK6GnHpcIoLq9BWk6oC3ZsRzcEOo0u33kjJheBOA4u2\
+wi6HUZJgoymmR3uENhFCAUPVmm9AG6FkdvUIuSAySpPb5Ab1768Z5B9c/+romjsfW2QLUcAQ4yZT\
+syQaMFM05ItSPB0/PH4dJx8dNz4KJMkLQAWR3BEOJqMxYSSm19fximxIzFXM4oMascpXNHyQh31s\
+pWEh6kaP5qS4JiUybhGsKO3YDp6XKqA2gSZL1klIyDVoFLrFkAiAVxxqoEzoUwcOVSsXGkoLx4Ah\
+L7eF2rZMdqmBMJNVyoh6z3PBcXCUhTnKaHZGK2Uz3KK0UJQUkPm0u1nmxjJa18j3wfHXACtKyHZw\
+omawIM5PYOtBcpFJ2LbBQRknxW8HyIsNNBTDhGmwjd3/QIvF7uy+sqrbc1U47mf8dD7eWgno1Gih\
+RH/2Ghz5c622xgt/SRCGAZGtzbhddzK1a0SJ0OpI2rgtlS/5tCWrTYkbcz+58zPL6QqliJQsfYdX\
+YczPbgihJ65NiUIXULdd/6Drxq2IfhGGoK78IJv/hBNNlyHW6670LjvDwLt76qyzWIEMAy1EZSDg\
+iceP7rbZ/gulD+WGXfLXZ8RZ1VpL3yQRMjjL5naQifQ+Pdn8wJRtUk2M5/ZDYGxW3g5iD8ZlfTu4\
+4G03Blkn/SiD9GNEOzO+BLr2j2SmoQBiQieaBXyxuB5YKn/ZK/Z9zS+Q3qxZw6hUDIph1Cxjzz9I\
+0eFl279o0eCm//7mrp9Gb15/6N5Gvb/6VP3u
+compile_options=\
+@eNq1UltPgzAUfudXNH0v0zhNXMSEMTZRRpsBifpCGCtadbQpsOh+vYdtMo23aZSXnvZ8J9/lEMiC\
+zNN7nosHjqSqhCzKnlFWWmRVoutiJnSy4FrkTxbexwaUJUAsvGce73WxYQwZ6yFcKp4phchg5I4P\
+4QiZ68ARDNx+PNrcEzuOaBLGjE3cMEwoc4Mxe+n57KiLTkpZ64yfIiLb2syVEks+M/PjR2zQHgLC\
+oW+PQguv2bABAhwWt49vuFfdvhs4Z8kbwIdiVmD3MprYCaOTyO57vhddtSONRmw4dNw47tSl7kxF\
+0bnJpa50WqDtR+ZghmSNjU2icFPKlIh4JiI3iNADAKU6u7WKtBILjkheSFIXZZpzaFS3pBmci2W6\
+GW/aleacPEipyIJnldQQSxsT6IJoHOtbXWsg7Z9TFoGzdyJ/HGfj6KtIYWVA5Y29axfQv/D+qfmd\
+1uV7wcUu61pXfylvS3Aip3fwWp6i16zb3NFqKf5gl+39Z5wrETRu/otWHDaeAXCoPiA=
+exehash=9a6d36b5c3b0e9b35fb4286a90785746f6a34c0536e0f41cb6aa1bbb22d7dff1
+
+503.bwaves_r=base=gem5-m64:
+# Last updated 2019-03-06 09:55:41
+opthash=95fa314cf03b9bfd33e8ab14445d593c0ec515331d5908f9577610eb102b9dbb
+baggage=
+compiler_version=\
+@eNqFVE1z2jAQvfMrfEs7saxAGjdlxoeU0E5n0pKhtD0ysrQIgS25+gDTX1/JfNiQTHuxR/t2n3bf\
+7ir6NJr/HE+/f5l8m0+eZ/437P0wQvIod6KwSMjIVEBN0htNnp7Go9n882iUYWc0zoXEfKG01USe\
+0KfZZP5r+vD8PJ7uvQqRY04pru/TefoOFUK6GnHpcIoLq9BWk6oC3ZsRzcEOo0u33kjJheBOA4u2\
+wi6HUZJgoymmR3uENhFCAUPVmm9AG6FkdvUIuSAySpPb5Ab1768Z5B9c/+romjsfW2QLUcAQ4yZT\
+syQaMFM05ItSPB0/PH4dJx8dNz4KJMkLQAWR3BEOJqMxYSSm19fximxIzFXM4oMascpXNHyQh31s\
+pWEh6kaP5qS4JiUybhGsKO3YDp6XKqA2gSZL1klIyDVoFLrFkAiAVxxqoEzoUwcOVSsXGkoLx4Ah\
+L7eF2rZMdqmBMJNVyoh6z3PBcXCUhTnKaHZGK2Uz3KK0UJQUkPm0u1nmxjJa18j3wfHXACtKyHZw\
+omawIM5PYOtBcpFJ2LbBQRknxW8HyIsNNBTDhGmwjd3/QIvF7uy+sqrbc1U47mf8dD7eWgno1Gih\
+RH/2Ghz5c622xgt/SRCGAZGtzbhddzK1a0SJ0OpI2rgtlS/5tCWrTYkbcz+58zPL6QqliJQsfYdX\
+YczPbgihJ65NiUIXULdd/6Drxq2IfhGGoK78IJv/hBNNlyHW6670LjvDwLt76qyzWIEMAy1EZSDg\
+iceP7rbZ/gulD+WGXfLXZ8RZ1VpL3yQRMjjL5naQifQ+Pdn8wJRtUk2M5/ZDYGxW3g5iD8ZlfTu4\
+4G03Blkn/SiD9GNEOzO+BLr2j2SmoQBiQieaBXyxuB5YKn/ZK/Z9zS+Q3qxZw6hUDIph1Cxjzz9I\
+0eFl279o0eCm//7mrp9Gb15/6N5Gvb/6VP3u
+compile_options=\
+@eNq1UV1PwjAUfd+vaPpe0PiRQBgJGwOnY23YlqgvyxgdVGFtuoHKr/duIGiMSoz2pbf33tN7zrm+\
+zMkyeeSZWHAkVSlkXrSNotQiLWO9yqdCx2uuRfZi4lNsQFhAi4lPGq2Tc2wYA8baCBeKp0oh0h86\
+owu4AubYcPl9x4qGiDztUnEvCmkcRIyNnSCIKXP8EXureezyHHUKudIp7yIi93EjU0ps+LSRtZ6x\
+QdsIZg683jAw8XYgNoCDzaJ98sP4umo5vn0VvwN+S6mGOLfhuBczOg57luu54d3bzzVTbNh0VElv\
+rgrdnIi8OcukLnWSo8MhS5BE0krMzlp4KdWQiMwQoWfQkOh0buZJKdYckSyXZJUXScahUM5JBVqK\
+TbKDVuVSc04WUiqy5mkpNRizNwo4gTm2+SOnbSO1rikLQdUngj8ZCjsApDty7x2o/kLKl1qOct5z\
+/ZtjnN9Gf0nvMKAjJw+QLbro/dSDjaj22Osfs4z/tLMmQaNqzXty2HgFFGoyXw==
+exehash=0b01ae90611ae95e3d63cb6961b43ad09f732e5472a83916c30242ca7cfe69d9
+
diff --git a/install.sh b/install.sh
index 86170a73..8c2e2ff4 100755
--- a/install.sh
+++ b/install.sh
@@ -243,6 +243,7 @@ SPEC_FORCE_INSTALL=
 SPEC_IGNORE_SPEC=
 SPECTARGET=
 SELECTED_TOOLSET=0
+SPEC_NOCHECK=1
 arch=
 
 # Parse the command-line arguments, if any
diff --git a/m5/m5_mmap.c b/m5/m5_mmap.c
new file mode 100644
index 00000000..0b35ea4f
--- /dev/null
+++ b/m5/m5_mmap.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "m5_mmap.h"
+
+void *m5_mem = NULL;
+
+void
+map_m5_mem()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
+
+void
+map_m5_mem_()
+{
+#ifdef M5OP_ADDR
+    int fd;
+
+    fd = open("/dev/mem", O_RDWR | O_SYNC);
+    if (fd == -1) {
+        perror("Can't open /dev/mem");
+        exit(1);
+    }
+
+    m5_mem = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+                  M5OP_ADDR);
+    if (!m5_mem) {
+        perror("Can't mmap /dev/mem");
+        exit(1);
+    }
+#endif
+}
diff --git a/m5/m5_mmap.h b/m5/m5_mmap.h
new file mode 100644
index 00000000..e2088345
--- /dev/null
+++ b/m5/m5_mmap.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2011, 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2005 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ */
+
+#ifndef __UTIL_M5_MMAP_H__
+#define __UTIL_M5_MMAP_H__
+
+#include <fcntl.h>
+#include <sys/mman.h>
+
+extern void *m5_mem;
+
+void map_m5_mem();
+void map_m5_mem_();
+
+#endif
diff --git a/m5/m5op_flags.h b/m5/m5op_flags.h
new file mode 100644
index 00000000..de44e008
--- /dev/null
+++ b/m5/m5op_flags.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+#define __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
+
+/* Flags for annotation calls */
+#define M5_AN_FL_NONE   0x0
+#define M5_AN_FL_BAD    0x2
+#define M5_AN_FL_LINK   0x10
+#define M5_AN_FL_RESET  0x20
+
+#endif //  __GEM5_ASM_GENERIC_M5OP_FLAGS_H__
diff --git a/m5/m5op_x86.S b/m5/m5op_x86.S
new file mode 100644
index 00000000..7698d390
--- /dev/null
+++ b/m5/m5op_x86.S
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Gabe Black
+ *          Nathan Binkert
+ *          Ali Saidi
+ */
+
+#include "m5ops.h"
+
+#if defined(M5OP_ADDR) && defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem@gotpcrel(%rip), %r11;  \
+        mov (%r11), %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#elif defined(M5OP_ADDR) && !defined(M5OP_PIC)
+/* Use the memory mapped m5op interface */
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        mov m5_mem, %r11;                 \
+        mov $number, %rax;                \
+        shl $8, %rax;                     \
+        mov 0(%r11, %rax, 1), %rax;       \
+        ret;                              \
+        .endfunc;
+
+#else
+/* Use the magic instruction based m5op interface. This does not work
+ * in virtualized environments.
+ */
+
+#define TWO_BYTE_OP(name, number)         \
+        .globl name;                      \
+        .func name;                       \
+name:                                     \
+        .byte 0x0F, 0x04;                 \
+        .word number;                     \
+        ret;                              \
+        .endfunc;
+
+#endif
+
+TWO_BYTE_OP(m5_arm, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC)
+
+TWO_BYTE_OP(m5_arm_, M5OP_ARM)
+TWO_BYTE_OP(m5_quiesce_, M5OP_QUIESCE)
+TWO_BYTE_OP(m5_quiesce_ns_, M5OP_QUIESCE_NS)
+TWO_BYTE_OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE)
+TWO_BYTE_OP(m5_quiesce_time_, M5OP_QUIESCE_TIME)
+TWO_BYTE_OP(m5_rpns_, M5OP_RPNS)
+TWO_BYTE_OP(m5_wake_cpu_, M5OP_WAKE_CPU)
+TWO_BYTE_OP(m5_exit_, M5OP_EXIT)
+TWO_BYTE_OP(m5_fail_, M5OP_FAIL)
+TWO_BYTE_OP(m5_init_param_, M5OP_INIT_PARAM)
+TWO_BYTE_OP(m5_load_symbol_, M5OP_LOAD_SYMBOL)
+TWO_BYTE_OP(m5_reset_stats_, M5OP_RESET_STATS)
+TWO_BYTE_OP(m5_dump_stats_, M5OP_DUMP_STATS)
+TWO_BYTE_OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS)
+TWO_BYTE_OP(m5_checkpoint_, M5OP_CHECKPOINT)
+TWO_BYTE_OP(m5_read_file_, M5OP_READ_FILE)
+TWO_BYTE_OP(m5_write_file_, M5OP_WRITE_FILE)
+TWO_BYTE_OP(m5_debug_break_, M5OP_DEBUG_BREAK)
+TWO_BYTE_OP(m5_switch_cpu_, M5OP_SWITCH_CPU)
+TWO_BYTE_OP(m5_add_symbol_, M5OP_ADD_SYMBOL)
+TWO_BYTE_OP(m5_panic_, M5OP_PANIC)
+TWO_BYTE_OP(m5_work_begin_, M5OP_WORK_BEGIN)
+TWO_BYTE_OP(m5_work_end_, M5OP_WORK_END)
+TWO_BYTE_OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC)
diff --git a/m5/m5ops.h b/m5/m5ops.h
new file mode 100644
index 00000000..452f3432
--- /dev/null
+++ b/m5/m5ops.h
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2016 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2003-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Nathan Binkert
+ *          Ali Saidi
+ *          Andreas Sandberg
+ */
+
+#ifndef __GEM5_ASM_GENERIC_M5OPS_H__
+#define __GEM5_ASM_GENERIC_M5OPS_H__
+
+#include "m5op_flags.h"
+
+#define M5OP_ARM                0x00
+#define M5OP_QUIESCE            0x01
+#define M5OP_QUIESCE_NS         0x02
+#define M5OP_QUIESCE_CYCLE      0x03
+#define M5OP_QUIESCE_TIME       0x04
+#define M5OP_RPNS               0x07
+#define M5OP_WAKE_CPU           0x09
+#define M5OP_DEPRECATED1        0x10 // obsolete ivlb
+#define M5OP_DEPRECATED2        0x11 // obsolete ivle
+#define M5OP_DEPRECATED3        0x20 // deprecated exit function
+#define M5OP_EXIT               0x21
+#define M5OP_FAIL               0x22
+#define M5OP_INIT_PARAM         0x30
+#define M5OP_LOAD_SYMBOL        0x31
+#define M5OP_RESET_STATS        0x40
+#define M5OP_DUMP_STATS         0x41
+#define M5OP_DUMP_RESET_STATS   0x42
+#define M5OP_CHECKPOINT         0x43
+#define M5OP_WRITE_FILE         0x4F
+#define M5OP_READ_FILE          0x50
+#define M5OP_DEBUG_BREAK        0x51
+#define M5OP_SWITCH_CPU         0x52
+#define M5OP_ADD_SYMBOL         0x53
+#define M5OP_PANIC              0x54
+
+#define M5OP_RESERVED2          0x56 // Reserved for user
+#define M5OP_RESERVED3          0x57 // Reserved for user
+#define M5OP_RESERVED4          0x58 // Reserved for user
+#define M5OP_RESERVED5          0x59 // Reserved for user
+
+#define M5OP_WORK_BEGIN         0x5a
+#define M5OP_WORK_END           0x5b
+
+#define M5OP_SE_SYSCALL         0x60
+#define M5OP_SE_PAGE_FAULT      0x61
+#define M5OP_DIST_TOGGLE_SYNC   0x62
+
+// These operations are for critical path annotation
+#define M5OP_ANNOTATE           0x55
+#define M5OP_AN_BSM             0x1
+#define M5OP_AN_ESM             0x2
+#define M5OP_AN_BEGIN           0x3
+#define M5OP_AN_END             0x4
+#define M5OP_AN_Q               0x6
+#define M5OP_AN_DQ              0x7
+#define M5OP_AN_WF              0x8
+#define M5OP_AN_WE              0x9
+#define M5OP_AN_RQ              0xA
+#define M5OP_AN_WS              0xB
+#define M5OP_AN_SQ              0xC
+#define M5OP_AN_AQ              0xD
+#define M5OP_AN_PQ              0xE
+#define M5OP_AN_L               0xF
+#define M5OP_AN_IDENTIFY        0x10
+#define M5OP_AN_GETID           0x11
+
+
+#define M5OP_FOREACH                                            \
+    M5OP(m5_arm, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FORTRAN_FOREACH					 \
+    M5OP(m5_arm_, M5OP_ARM, 0);                                  \
+    M5OP(m5_quiesce_, M5OP_QUIESCE, 0);                          \
+    M5OP(m5_quiesce_ns_, M5OP_QUIESCE_NS, 0);                    \
+    M5OP(m5_quiesce_cycle_, M5OP_QUIESCE_CYCLE, 0);              \
+    M5OP(m5_quiesce_time_, M5OP_QUIESCE_TIME, 0);                \
+    M5OP(m5_rpns_, M5OP_RPNS, 0);                                \
+    M5OP(m5_wake_cpu_, M5OP_WAKE_CPU, 0);                        \
+    M5OP(m5_exit_, M5OP_EXIT, 0);                                \
+    M5OP(m5_fail_, M5OP_FAIL, 0);                                \
+    M5OP(m5_init_param_, M5OP_INIT_PARAM, 0);                    \
+    M5OP(m5_load_symbol_, M5OP_LOAD_SYMBOL, 0);                  \
+    M5OP(m5_reset_stats_, M5OP_RESET_STATS, 0);                  \
+    M5OP(m5_dump_stats_, M5OP_DUMP_STATS, 0);                    \
+    M5OP(m5_dump_reset_stats_, M5OP_DUMP_RESET_STATS, 0);        \
+    M5OP(m5_checkpoint_, M5OP_CHECKPOINT, 0);                    \
+    M5OP(m5_read_file_, M5OP_READ_FILE, 0);                      \
+    M5OP(m5_write_file_, M5OP_WRITE_FILE, 0);                    \
+    M5OP(m5_debug_break_, M5OP_DEBUG_BREAK, 0);                  \
+    M5OP(m5_switch_cpu_, M5OP_SWITCH_CPU, 0);                    \
+    M5OP(m5_add_symbol_, M5OP_ADD_SYMBOL, 0);                    \
+    M5OP(m5_panic_, M5OP_PANIC, 0);                              \
+    M5OP(m5_work_begin_, M5OP_WORK_BEGIN, 0);                    \
+    M5OP(m5_work_end_, M5OP_WORK_END, 0);                        \
+    M5OP(m5_dist_toggle_sync_, M5OP_DIST_TOGGLE_SYNC, 0);
+
+#define M5OP_FOREACH_ANNOTATION                      \
+    M5_ANNOTATION(m5a_bsm, M5OP_AN_BSM);             \
+    M5_ANNOTATION(m5a_esm, M5OP_AN_ESM);             \
+    M5_ANNOTATION(m5a_begin, M5OP_AN_BEGIN);         \
+    M5_ANNOTATION(m5a_end, M5OP_AN_END);             \
+    M5_ANNOTATION(m5a_q, M5OP_AN_Q);                 \
+    M5_ANNOTATION(m5a_dq, M5OP_AN_DQ);               \
+    M5_ANNOTATION(m5a_wf, M5OP_AN_WF);               \
+    M5_ANNOTATION(m5a_we, M5OP_AN_WE);               \
+    M5_ANNOTATION(m5a_rq, M5OP_AN_RQ);               \
+    M5_ANNOTATION(m5a_ws, M5OP_AN_WS);               \
+    M5_ANNOTATION(m5a_sq, M5OP_AN_SQ);               \
+    M5_ANNOTATION(m5a_aq, M5OP_AN_AQ);               \
+    M5_ANNOTATION(m5a_pq, M5OP_AN_PQ);               \
+    M5_ANNOTATION(m5a_l, M5OP_AN_L);                 \
+    M5_ANNOTATION(m5a_identify, M5OP_AN_IDENTIFY);   \
+    M5_ANNOTATION(m5a_getid, M5OP_AN_GETID);
+
+#endif //  __GEM5_ASM_GENERIC_M5OPS_H__
